
fs_fat.kmod:     file format elf32-i386


Disassembly of section .text:

00000000 <_ZN8fs_fat32D1Ev>:
}

/*
 * Clean up the filesystem's internal data structures, and cleanly unmount it.
 */
fs_fat32::~fs_fat32() {
       0:	55                   	push   %ebp
       1:	89 e5                	mov    %esp,%ebp
       3:	83 ec 18             	sub    $0x18,%esp
       6:	a1 00 00 00 00       	mov    0x0,%eax
       b:	89 45 f4             	mov    %eax,-0xc(%ebp)
       e:	31 c0                	xor    %eax,%eax

}
      10:	8b 45 f4             	mov    -0xc(%ebp),%eax
      13:	33 05 00 00 00 00    	xor    0x0,%eax
      19:	75 02                	jne    1d <_ZN8fs_fat32D1Ev+0x1d>
      1b:	c9                   	leave  
      1c:	c3                   	ret    
      1d:	e8 fc ff ff ff       	call   1e <_ZN8fs_fat32D1Ev+0x1e>
      22:	66 90                	xchg   %ax,%ax

00000024 <_ZN8fs_fat3211lfnCheckSumEPh>:
}

/*
 * Calculates the checksum for a long name.
 */
uint8_t fs_fat32::lfnCheckSum(unsigned char *shortName) {
      24:	55                   	push   %ebp
	uint16_t FcbNameLen;
	uint8_t sum = 0;

	for(FcbNameLen = 11; FcbNameLen != 0; FcbNameLen--) {
		// NOTE: The operation is an unsigned char rotate right
		sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortName++;
      25:	31 c9                	xor    %ecx,%ecx
}

/*
 * Calculates the checksum for a long name.
 */
uint8_t fs_fat32::lfnCheckSum(unsigned char *shortName) {
      27:	89 e5                	mov    %esp,%ebp
      29:	53                   	push   %ebx
      2a:	83 ec 14             	sub    $0x14,%esp
      2d:	8b 55 0c             	mov    0xc(%ebp),%edx
      30:	a1 00 00 00 00       	mov    0x0,%eax
      35:	89 45 f4             	mov    %eax,-0xc(%ebp)
      38:	31 c0                	xor    %eax,%eax
      3a:	8d 5a 0b             	lea    0xb(%edx),%ebx
      3d:	eb 12                	jmp    51 <_ZN8fs_fat3211lfnCheckSumEPh+0x2d>
      3f:	90                   	nop
	uint16_t FcbNameLen;
	uint8_t sum = 0;

	for(FcbNameLen = 11; FcbNameLen != 0; FcbNameLen--) {
		// NOTE: The operation is an unsigned char rotate right
		sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortName++;
      40:	0f b6 c8             	movzbl %al,%ecx
      43:	89 c8                	mov    %ecx,%eax
      45:	83 e0 01             	and    $0x1,%eax
      48:	83 f8 01             	cmp    $0x1,%eax
      4b:	19 c0                	sbb    %eax,%eax
      4d:	f6 d0                	not    %al
      4f:	24 80                	and    $0x80,%al
      51:	02 02                	add    (%edx),%al
      53:	42                   	inc    %edx
      54:	d1 f9                	sar    %ecx
      56:	00 c8                	add    %cl,%al
 */
uint8_t fs_fat32::lfnCheckSum(unsigned char *shortName) {
	uint16_t FcbNameLen;
	uint8_t sum = 0;

	for(FcbNameLen = 11; FcbNameLen != 0; FcbNameLen--) {
      58:	39 da                	cmp    %ebx,%edx
      5a:	75 e4                	jne    40 <_ZN8fs_fat3211lfnCheckSumEPh+0x1c>
		// NOTE: The operation is an unsigned char rotate right
		sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortName++;
	}

	return sum;
}
      5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
      5f:	33 15 00 00 00 00    	xor    0x0,%edx
      65:	75 06                	jne    6d <_ZN8fs_fat3211lfnCheckSumEPh+0x49>
      67:	83 c4 14             	add    $0x14,%esp
      6a:	5b                   	pop    %ebx
      6b:	5d                   	pop    %ebp
      6c:	c3                   	ret    
      6d:	e8 fc ff ff ff       	call   6e <_ZN8fs_fat3211lfnCheckSumEPh+0x4a>
      72:	66 90                	xchg   %ax,%ax

00000074 <_ZN8fs_fat3217convert_timestampEtth>:

/*
 * Converts from the FAT timestamp format (separate date, time, and millis) to
 * more acceptable, sane, (and indubitably) less shitty UNIX epoch.
 */
time_t fs_fat32::convert_timestamp(uint16_t date, uint16_t time, uint8_t millis) {
      74:	55                   	push   %ebp
      75:	89 e5                	mov    %esp,%ebp
      77:	56                   	push   %esi
      78:	53                   	push   %ebx
      79:	83 ec 10             	sub    $0x10,%esp
      7c:	0f b7 5d 0c          	movzwl 0xc(%ebp),%ebx
      80:	a1 00 00 00 00       	mov    0x0,%eax
      85:	89 45 f4             	mov    %eax,-0xc(%ebp)
      88:	31 c0                	xor    %eax,%eax
      8a:	0f b7 4d 10          	movzwl 0x10(%ebp),%ecx
	time_t t = 315532800;
      8e:	b8 00 a6 ce 12       	mov    $0x12cea600,%eax

/*
 * Converts from the FAT timestamp format (separate date, time, and millis) to
 * more acceptable, sane, (and indubitably) less shitty UNIX epoch.
 */
time_t fs_fat32::convert_timestamp(uint16_t date, uint16_t time, uint8_t millis) {
      93:	0f b6 55 14          	movzbl 0x14(%ebp),%edx
	time_t t = 315532800;

	// Process date
	if(date) {
      97:	85 db                	test   %ebx,%ebx
      99:	74 10                	je     ab <_ZN8fs_fat3217convert_timestampEtth+0x37>
		unsigned int month = (date & 0x1E0) >> 5;
		unsigned int year = (date & 0xFE00) >> 9;

		t += (date & 0x1F) * 86400; // day
      9b:	89 d8                	mov    %ebx,%eax
      9d:	83 e0 1f             	and    $0x1f,%eax
      a0:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
      a6:	05 00 a6 ce 12       	add    $0x12cea600,%eax
	}

	// Process time
	if(time) {
      ab:	85 c9                	test   %ecx,%ecx
      ad:	74 2c                	je     db <_ZN8fs_fat3217convert_timestampEtth+0x67>
		t += (time & 0x1F) * 2; // stored as multiples of twos
		t += ((time & 0x7E0) >> 5) * 60;
		t += ((time & 0xF800) >> 11) * 3600;
      af:	89 cb                	mov    %ecx,%ebx
		t += (date & 0x1F) * 86400; // day
	}

	// Process time
	if(time) {
		t += (time & 0x1F) * 2; // stored as multiples of twos
      b1:	89 ce                	mov    %ecx,%esi
		t += ((time & 0x7E0) >> 5) * 60;
		t += ((time & 0xF800) >> 11) * 3600;
      b3:	c1 eb 0b             	shr    $0xb,%ebx
	}

	// Process time
	if(time) {
		t += (time & 0x1F) * 2; // stored as multiples of twos
		t += ((time & 0x7E0) >> 5) * 60;
      b6:	81 e1 e0 07 00 00    	and    $0x7e0,%ecx
		t += ((time & 0xF800) >> 11) * 3600;
      bc:	69 db 10 0e 00 00    	imul   $0xe10,%ebx,%ebx
		t += (date & 0x1F) * 86400; // day
	}

	// Process time
	if(time) {
		t += (time & 0x1F) * 2; // stored as multiples of twos
      c2:	83 e6 1f             	and    $0x1f,%esi
		t += ((time & 0x7E0) >> 5) * 60;
      c5:	c1 f9 05             	sar    $0x5,%ecx
		t += (date & 0x1F) * 86400; // day
	}

	// Process time
	if(time) {
		t += (time & 0x1F) * 2; // stored as multiples of twos
      c8:	8d 1c 73             	lea    (%ebx,%esi,2),%ebx
		t += ((time & 0x7E0) >> 5) * 60;
      cb:	8d 34 8d 00 00 00 00 	lea    0x0(,%ecx,4),%esi
      d2:	c1 e1 06             	shl    $0x6,%ecx
      d5:	29 f1                	sub    %esi,%ecx
      d7:	01 d9                	add    %ebx,%ecx
		t += ((time & 0xF800) >> 11) * 3600;
      d9:	01 c8                	add    %ecx,%eax
	}

	// Milliseconds
	if(millis) {
		if(millis > 99) t++;
      db:	80 fa 64             	cmp    $0x64,%dl
      de:	83 d8 ff             	sbb    $0xffffffff,%eax
	}

	return t;
}
      e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
      e4:	33 15 00 00 00 00    	xor    0x0,%edx
      ea:	75 07                	jne    f3 <_ZN8fs_fat3217convert_timestampEtth+0x7f>
      ec:	83 c4 10             	add    $0x10,%esp
      ef:	5b                   	pop    %ebx
      f0:	5e                   	pop    %esi
      f1:	5d                   	pop    %ebp
      f2:	c3                   	ret    
      f3:	e8 fc ff ff ff       	call   f4 <_ZN8fs_fat3217convert_timestampEtth+0x80>

000000f8 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0>:

/*
 * Converts FAT32-style directory entries into fat_file_t or fat_directory_t
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
      f8:	55                   	push   %ebp
      f9:	89 e5                	mov    %esp,%ebp
      fb:	57                   	push   %edi
      fc:	56                   	push   %esi
      fd:	53                   	push   %ebx
      fe:	81 ec bc 06 00 00    	sub    $0x6bc,%esp
     104:	89 8d 70 f9 ff ff    	mov    %ecx,-0x690(%ebp)
     10a:	8b 4d 08             	mov    0x8(%ebp),%ecx
     10d:	89 8d 64 f9 ff ff    	mov    %ecx,-0x69c(%ebp)
     113:	8b 0d 00 00 00 00    	mov    0x0,%ecx
     119:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
     11c:	31 c9                	xor    %ecx,%ecx
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     11e:	8b 8d 70 f9 ff ff    	mov    -0x690(%ebp),%ecx
     124:	85 c9                	test   %ecx,%ecx
     126:	0f 84 b4 00 00 00    	je     1e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xe8>
     12c:	89 d3                	mov    %edx,%ebx
     12e:	31 d2                	xor    %edx,%edx
     130:	c6 85 60 f9 ff ff 00 	movb   $0x0,-0x6a0(%ebp)
     137:	31 f6                	xor    %esi,%esi
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
					unsigned int newNameLen = 0;

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
     139:	89 c7                	mov    %eax,%edi
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     13b:	89 95 68 f9 ff ff    	mov    %edx,-0x698(%ebp)
     141:	c6 85 6c f9 ff ff 00 	movb   $0x0,-0x694(%ebp)
     148:	90                   	nop
     149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		entry = &entries[i];

		// Is this entry usable?
		if(entry->name[0] != 0xE5 && entry->name[0] != 0x00) {
     150:	0f b6 03             	movzbl (%ebx),%eax
     153:	84 c0                	test   %al,%al
     155:	0f 84 a5 00 00 00    	je     200 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x108>
     15b:	3c e5                	cmp    $0xe5,%al
     15d:	0f 84 9d 00 00 00    	je     200 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x108>
			// Clear state
			item = NULL;

			// Long Filenames
			if((entry->attributes & FAT_ATTR_LFN) == FAT_ATTR_LFN) {
     163:	0f b6 53 0b          	movzbl 0xb(%ebx),%edx
     167:	89 d1                	mov    %edx,%ecx
     169:	83 e1 0f             	and    $0xf,%ecx
     16c:	83 f9 0f             	cmp    $0xf,%ecx
     16f:	0f 84 ab 00 00 00    	je     220 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x128>
					}

					// Copy checksum
					longname_checksum = ln->checksum;
				}
			} else if(entry->attributes & FAT_ATTR_DIRECTORY) { // directory
     175:	f6 c2 10             	test   $0x10,%dl
     178:	0f 85 82 01 00 00    	jne    300 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x208>
					item = &dir->i;

					// Add directory as child
					list_add(root->children, dir);
				}
			} else if(entry->attributes & FAT_ATTR_VOLUME_ID) { // Volume label
     17e:	f6 c2 08             	test   $0x8,%dl
     181:	0f 84 b9 02 00 00    	je     440 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x348>
				if(volumeLabel) {
     187:	8b 57 0c             	mov    0xc(%edi),%edx
     18a:	31 c0                	xor    %eax,%eax
     18c:	85 d2                	test   %edx,%edx
     18e:	74 14                	je     1a4 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xac>
					memclr(volumeLabel, 16);
     190:	b9 10 00 00 00       	mov    $0x10,%ecx
     195:	89 4c 24 04          	mov    %ecx,0x4(%esp)
     199:	89 14 24             	mov    %edx,(%esp)
     19c:	e8 fc ff ff ff       	call   19d <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xa5>
     1a1:	8b 47 0c             	mov    0xc(%edi),%eax
				}

				memcpy(volumeLabel, &entry->name, 11);
     1a4:	ba 0b 00 00 00       	mov    $0xb,%edx
     1a9:	89 54 24 08          	mov    %edx,0x8(%esp)
     1ad:	89 5c 24 04          	mov    %ebx,0x4(%esp)
     1b1:	89 04 24             	mov    %eax,(%esp)
     1b4:	e8 fc ff ff ff       	call   1b5 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xbd>

				// Trim spaces at the end
				for(unsigned int i = 10; i > 0; i--) {
     1b9:	b8 0a 00 00 00       	mov    $0xa,%eax
     1be:	66 90                	xchg   %ax,%ax
					if(volumeLabel[i] == ' ') {
     1c0:	8b 57 0c             	mov    0xc(%edi),%edx
     1c3:	01 c2                	add    %eax,%edx
     1c5:	80 3a 20             	cmpb   $0x20,(%edx)
     1c8:	75 06                	jne    1d0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xd8>
				}

				memcpy(volumeLabel, &entry->name, 11);

				// Trim spaces at the end
				for(unsigned int i = 10; i > 0; i--) {
     1ca:	48                   	dec    %eax
					if(volumeLabel[i] == ' ') {
						volumeLabel[i] = 0x00;
     1cb:	c6 02 00             	movb   $0x0,(%edx)
				}

				memcpy(volumeLabel, &entry->name, 11);

				// Trim spaces at the end
				for(unsigned int i = 10; i > 0; i--) {
     1ce:	75 f0                	jne    1c0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xc8>
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     1d0:	46                   	inc    %esi
     1d1:	83 c3 20             	add    $0x20,%ebx
     1d4:	3b b5 70 f9 ff ff    	cmp    -0x690(%ebp),%esi
     1da:	0f 85 70 ff ff ff    	jne    150 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x58>
		}
	}

	// Perform some cleanup after the conversion finishes.
	done: ;
}
     1e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     1e3:	33 05 00 00 00 00    	xor    0x0,%eax
     1e9:	0f 85 6a 05 00 00    	jne    759 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x661>
     1ef:	81 c4 bc 06 00 00    	add    $0x6bc,%esp
     1f5:	5b                   	pop    %ebx
     1f6:	5e                   	pop    %esi
     1f7:	5f                   	pop    %edi
     1f8:	5d                   	pop    %ebp
     1f9:	c3                   	ret    
     1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
				 * To speed up file reads, store the first cluster of this file
				 * in the low 32 bits of the userData field of the item.
				 */
				item->userData = (entry->cluster_high << 16) | (entry->cluster_low);
			}
		} else if(entry->name[0] == 0x00) {
     200:	84 c0                	test   %al,%al
     202:	74 dc                	je     1e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xe8>
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     204:	46                   	inc    %esi
     205:	83 c3 20             	add    $0x20,%ebx
     208:	3b b5 70 f9 ff ff    	cmp    -0x690(%ebp),%esi
     20e:	0f 85 3c ff ff ff    	jne    150 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x58>
     214:	eb ca                	jmp    1e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xe8>
     216:	8d 76 00             	lea    0x0(%esi),%esi
     219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
			if((entry->attributes & FAT_ATTR_LFN) == FAT_ATTR_LFN) {
				// Get longname entry
				fat_longname_dirent_t *ln = (fat_longname_dirent_t *) entry;

				// Ignore invalid longname entries
				if(ln->type == 0) {
     220:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
     224:	75 aa                	jne    1d0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xd8>
					foundLongName = true;

					unsigned int longname_offset = (ln->order & 0x3F) - 1;
     226:	0f b6 c0             	movzbl %al,%eax
     229:	89 c1                	mov    %eax,%ecx
     22b:	83 e1 3f             	and    $0x3f,%ecx

					// Last entry?
					if(ln->order & 0x40) {
						longname_num = longname_offset + 1;
     22e:	a8 40                	test   $0x40,%al

				// Ignore invalid longname entries
				if(ln->type == 0) {
					foundLongName = true;

					unsigned int longname_offset = (ln->order & 0x3F) - 1;
     230:	8d 51 ff             	lea    -0x1(%ecx),%edx

					// Last entry?
					if(ln->order & 0x40) {
						longname_num = longname_offset + 1;
     233:	0f 44 8d 68 f9 ff ff 	cmove  -0x698(%ebp),%ecx

					// Copy strings
					unsigned int c = 0;

					for(c = 0; c < 5; c++){
						longname_buffer[longname_offset].name1[c] = ln->name1[c];
     23a:	8d 04 52             	lea    (%edx,%edx,2),%eax
     23d:	8d 04 82             	lea    (%edx,%eax,4),%eax
     240:	0f b7 53 01          	movzwl 0x1(%ebx),%edx

					unsigned int longname_offset = (ln->order & 0x3F) - 1;

					// Last entry?
					if(ln->order & 0x40) {
						longname_num = longname_offset + 1;
     244:	89 8d 68 f9 ff ff    	mov    %ecx,-0x698(%ebp)

					// Copy strings
					unsigned int c = 0;

					for(c = 0; c < 5; c++){
						longname_buffer[longname_offset].name1[c] = ln->name1[c];
     24a:	89 c1                	mov    %eax,%ecx
     24c:	01 c9                	add    %ecx,%ecx
     24e:	89 85 74 f9 ff ff    	mov    %eax,-0x68c(%ebp)
     254:	8d 45 e8             	lea    -0x18(%ebp),%eax
     257:	01 c8                	add    %ecx,%eax
     259:	66 89 90 96 f9 ff ff 	mov    %dx,-0x66a(%eax)
     260:	0f b7 53 03          	movzwl 0x3(%ebx),%edx
     264:	66 89 90 98 f9 ff ff 	mov    %dx,-0x668(%eax)
     26b:	0f b7 53 05          	movzwl 0x5(%ebx),%edx
     26f:	66 89 90 9a f9 ff ff 	mov    %dx,-0x666(%eax)
     276:	0f b7 53 07          	movzwl 0x7(%ebx),%edx
     27a:	66 89 90 9c f9 ff ff 	mov    %dx,-0x664(%eax)
     281:	0f b7 53 09          	movzwl 0x9(%ebx),%edx
     285:	66 89 90 9e f9 ff ff 	mov    %dx,-0x662(%eax)

/*
 * Converts FAT32-style directory entries into fat_file_t or fat_directory_t
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
     28c:	8d 95 7e f9 ff ff    	lea    -0x682(%ebp),%edx

					// Copy strings
					unsigned int c = 0;

					for(c = 0; c < 5; c++){
						longname_buffer[longname_offset].name1[c] = ln->name1[c];
     292:	31 c0                	xor    %eax,%eax

/*
 * Converts FAT32-style directory entries into fat_file_t or fat_directory_t
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
     294:	01 d1                	add    %edx,%ecx
     296:	8d 76 00             	lea    0x0(%esi),%esi
     299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
					for(c = 0; c < 5; c++){
						longname_buffer[longname_offset].name1[c] = ln->name1[c];
					}

					for(c = 0; c < 6; c++){
						longname_buffer[longname_offset].name2[c] = ln->name2[c];
     2a0:	0f b7 54 43 0e       	movzwl 0xe(%ebx,%eax,2),%edx
     2a5:	66 89 54 41 0a       	mov    %dx,0xa(%ecx,%eax,2)

					for(c = 0; c < 5; c++){
						longname_buffer[longname_offset].name1[c] = ln->name1[c];
					}

					for(c = 0; c < 6; c++){
     2aa:	40                   	inc    %eax
     2ab:	83 f8 06             	cmp    $0x6,%eax
     2ae:	75 f0                	jne    2a0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x1a8>
						longname_buffer[longname_offset].name2[c] = ln->name2[c];
					}

					for(c = 0; c < 2; c++){
						longname_buffer[longname_offset].name3[c] = ln->name3[c];
     2b0:	8b 8d 74 f9 ff ff    	mov    -0x68c(%ebp),%ecx
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     2b6:	46                   	inc    %esi
					for(c = 0; c < 6; c++){
						longname_buffer[longname_offset].name2[c] = ln->name2[c];
					}

					for(c = 0; c < 2; c++){
						longname_buffer[longname_offset].name3[c] = ln->name3[c];
     2b7:	0f b7 53 1c          	movzwl 0x1c(%ebx),%edx
				// Get longname entry
				fat_longname_dirent_t *ln = (fat_longname_dirent_t *) entry;

				// Ignore invalid longname entries
				if(ln->type == 0) {
					foundLongName = true;
     2bb:	c6 85 6c f9 ff ff 01 	movb   $0x1,-0x694(%ebp)
					for(c = 0; c < 6; c++){
						longname_buffer[longname_offset].name2[c] = ln->name2[c];
					}

					for(c = 0; c < 2; c++){
						longname_buffer[longname_offset].name3[c] = ln->name3[c];
     2c2:	8d 44 4d e8          	lea    -0x18(%ebp,%ecx,2),%eax
     2c6:	66 89 90 ac f9 ff ff 	mov    %dx,-0x654(%eax)
     2cd:	0f b7 53 1e          	movzwl 0x1e(%ebx),%edx
     2d1:	66 89 90 ae f9 ff ff 	mov    %dx,-0x652(%eax)
					}

					// Copy checksum
					longname_checksum = ln->checksum;
     2d8:	0f b6 53 0d          	movzbl 0xd(%ebx),%edx
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     2dc:	83 c3 20             	add    $0x20,%ebx
     2df:	3b b5 70 f9 ff ff    	cmp    -0x690(%ebp),%esi
					for(c = 0; c < 2; c++){
						longname_buffer[longname_offset].name3[c] = ln->name3[c];
					}

					// Copy checksum
					longname_checksum = ln->checksum;
     2e5:	88 95 60 f9 ff ff    	mov    %dl,-0x6a0(%ebp)
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     2eb:	0f 85 5f fe ff ff    	jne    150 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x58>
     2f1:	e9 ea fe ff ff       	jmp    1e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xe8>
     2f6:	8d 76 00             	lea    0x0(%esi),%esi
     2f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
		/*
		 * Extracts the 8.3 filename for a directory entry, and formats it as a 14-byte
		 * character string.
		 */
		static char* dirent_get_8_3_name(fat_dirent_t *d) {
			char *buf = (char *) kmalloc(16);
     300:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
     307:	e8 fc ff ff ff       	call   308 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x210>
     30c:	89 c2                	mov    %eax,%edx
			memclr(buf, 16);
     30e:	b8 10 00 00 00       	mov    $0x10,%eax
     313:	89 14 24             	mov    %edx,(%esp)
     316:	89 95 54 f9 ff ff    	mov    %edx,-0x6ac(%ebp)
     31c:	89 44 24 04          	mov    %eax,0x4(%esp)
     320:	e8 fc ff ff ff       	call   321 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x229>

			unsigned int c = 0;
     325:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
     32b:	31 c9                	xor    %ecx,%ecx
     32d:	8d 76 00             	lea    0x0(%esi),%esi

			// Copy filename
			for(int i = 0; i < 8; i++) {
				if(d->name[i] != ' ') {
     330:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
     334:	3c 20                	cmp    $0x20,%al
     336:	74 09                	je     341 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x249>
					buf[c++] = d->name[i];
     338:	88 04 0a             	mov    %al,(%edx,%ecx,1)
     33b:	41                   	inc    %ecx
			memclr(buf, 16);

			unsigned int c = 0;

			// Copy filename
			for(int i = 0; i < 8; i++) {
     33c:	83 f9 08             	cmp    $0x8,%ecx
     33f:	75 ef                	jne    330 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x238>
					break;
				}
			}

			// Dot
			if(!(d->attributes & FAT_ATTR_DIRECTORY)) {
     341:	f6 43 0b 10          	testb  $0x10,0xb(%ebx)
     345:	75 05                	jne    34c <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x254>
				buf[c++] = '.';
     347:	c6 04 0a 2e          	movb   $0x2e,(%edx,%ecx,1)
     34b:	41                   	inc    %ecx
		 */
		static char* dirent_get_8_3_name(fat_dirent_t *d) {
			char *buf = (char *) kmalloc(16);
			memclr(buf, 16);

			unsigned int c = 0;
     34c:	31 c0                	xor    %eax,%eax
     34e:	89 b5 74 f9 ff ff    	mov    %esi,-0x68c(%ebp)
     354:	89 c6                	mov    %eax,%esi
				buf[c++] = '.';
			}

			// Extension
			for(int i = 0; i < 3; i++) {
				if(d->ext[i] != ' ') {
     356:	0f b6 44 33 08       	movzbl 0x8(%ebx,%esi,1),%eax
     35b:	3c 20                	cmp    $0x20,%al
     35d:	0f 84 3d 03 00 00    	je     6a0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x5a8>
			if(!(d->attributes & FAT_ATTR_DIRECTORY)) {
				buf[c++] = '.';
			}

			// Extension
			for(int i = 0; i < 3; i++) {
     363:	46                   	inc    %esi
				if(d->ext[i] != ' ') {
					buf[c++] = d->ext[i];
     364:	88 04 0a             	mov    %al,(%edx,%ecx,1)
     367:	41                   	inc    %ecx
			if(!(d->attributes & FAT_ATTR_DIRECTORY)) {
				buf[c++] = '.';
			}

			// Extension
			for(int i = 0; i < 3; i++) {
     368:	83 fe 03             	cmp    $0x3,%esi
     36b:	75 e9                	jne    356 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x25e>
     36d:	8b b5 74 f9 ff ff    	mov    -0x68c(%ebp),%esi
				}
			} else if(entry->attributes & FAT_ATTR_DIRECTORY) { // directory
				char *name = fs_fat32::dirent_get_8_3_name(entry);

				// Ignore dot and dotdot
				if(strcmp(".", name) && strcmp("..", name)) {
     373:	89 54 24 04          	mov    %edx,0x4(%esp)
     377:	89 95 54 f9 ff ff    	mov    %edx,-0x6ac(%ebp)
     37d:	c7 04 24 09 19 00 00 	movl   $0x1909,(%esp)
     384:	e8 fc ff ff ff       	call   385 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x28d>
     389:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
     38f:	85 c0                	test   %eax,%eax
     391:	0f 84 39 fe ff ff    	je     1d0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xd8>
     397:	89 54 24 04          	mov    %edx,0x4(%esp)
     39b:	c7 04 24 0b 19 00 00 	movl   $0x190b,(%esp)
     3a2:	e8 fc ff ff ff       	call   3a3 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x2ab>
     3a7:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
     3ad:	85 c0                	test   %eax,%eax
     3af:	0f 84 1b fe ff ff    	je     1d0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xd8>
					// Lowercase directory name?
					if((entry->nt_reserved & 0x08) || (entry->nt_reserved & 0x10)) {
     3b5:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
     3b9:	31 c9                	xor    %ecx,%ecx
     3bb:	a8 18                	test   $0x18,%al
     3bd:	74 30                	je     3ef <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x2f7>
     3bf:	89 b5 74 f9 ff ff    	mov    %esi,-0x68c(%ebp)
     3c5:	89 ce                	mov    %ecx,%esi
     3c7:	89 f6                	mov    %esi,%esi
     3c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
						for(unsigned int c = 0; c < 11; c++) {
							name[c] = tolower(name[c]);
     3d0:	0f b6 04 32          	movzbl (%edx,%esi,1),%eax
     3d4:	88 c1                	mov    %al,%cl
     3d6:	80 e9 41             	sub    $0x41,%cl
     3d9:	80 f9 19             	cmp    $0x19,%cl
     3dc:	77 02                	ja     3e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x2e8>
     3de:	04 20                	add    $0x20,%al
     3e0:	88 04 32             	mov    %al,(%edx,%esi,1)

				// Ignore dot and dotdot
				if(strcmp(".", name) && strcmp("..", name)) {
					// Lowercase directory name?
					if((entry->nt_reserved & 0x08) || (entry->nt_reserved & 0x10)) {
						for(unsigned int c = 0; c < 11; c++) {
     3e3:	46                   	inc    %esi
     3e4:	83 fe 0b             	cmp    $0xb,%esi
     3e7:	75 e7                	jne    3d0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x2d8>
     3e9:	8b b5 74 f9 ff ff    	mov    -0x68c(%ebp),%esi
							name[c] = tolower(name[c]);
						}
					}

					fs_directory_t *dir = hal_vfs_allocate_directory(true);
     3ef:	89 95 54 f9 ff ff    	mov    %edx,-0x6ac(%ebp)
     3f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
     3fc:	e8 fc ff ff ff       	call   3fd <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x305>
					dir->i.name = name;
     401:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
					dir->parent = root->i.handle;
     407:	8b 8d 64 f9 ff ff    	mov    -0x69c(%ebp),%ecx
							name[c] = tolower(name[c]);
						}
					}

					fs_directory_t *dir = hal_vfs_allocate_directory(true);
					dir->i.name = name;
     40d:	89 50 04             	mov    %edx,0x4(%eax)
					dir->parent = root->i.handle;
     410:	8b 51 14             	mov    0x14(%ecx),%edx
     413:	89 50 30             	mov    %edx,0x30(%eax)
					item = &dir->i;
     416:	89 c2                	mov    %eax,%edx

					// Add directory as child
					list_add(root->children, dir);
     418:	89 44 24 04          	mov    %eax,0x4(%esp)
     41c:	8b 41 34             	mov    0x34(%ecx),%eax
     41f:	89 95 54 f9 ff ff    	mov    %edx,-0x6ac(%ebp)
     425:	89 04 24             	mov    %eax,(%esp)
     428:	e8 fc ff ff ff       	call   429 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x331>
     42d:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
     433:	e9 10 01 00 00       	jmp    548 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x450>
     438:	90                   	nop
     439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
						break;
					}
				}
			} else { // regular file
				// Allocate a file object
				fs_file_t *file = hal_vfs_allocate_file(root);
     440:	8b 95 64 f9 ff ff    	mov    -0x69c(%ebp),%edx
     446:	89 14 24             	mov    %edx,(%esp)
     449:	e8 fc ff ff ff       	call   44a <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x352>
				file->size = entry->filesize;
     44e:	8b 4b 1c             	mov    0x1c(%ebx),%ecx

				unsigned int c = 0;

				// Handle long name
				if(foundLongName) {
     451:	80 bd 6c f9 ff ff 00 	cmpb   $0x0,-0x694(%ebp)
						break;
					}
				}
			} else { // regular file
				// Allocate a file object
				fs_file_t *file = hal_vfs_allocate_file(root);
     458:	89 85 74 f9 ff ff    	mov    %eax,-0x68c(%ebp)
				file->size = entry->filesize;
     45e:	89 48 38             	mov    %ecx,0x38(%eax)
     461:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)

				unsigned int c = 0;

				// Handle long name
				if(foundLongName) {
     468:	0f 85 92 01 00 00    	jne    600 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x508>

					longname_checksum = longname_num = 0;
					foundLongName = false;
				} else {
					// Lowercase basename?
					if(entry->nt_reserved & 0x08) {
     46e:	0f b6 4b 0c          	movzbl 0xc(%ebx),%ecx
     472:	f6 c1 08             	test   $0x8,%cl
     475:	89 8d 6c f9 ff ff    	mov    %ecx,-0x694(%ebp)
     47b:	74 1c                	je     499 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x3a1>
     47d:	31 c9                	xor    %ecx,%ecx
     47f:	90                   	nop
						for(c = 0; c < 8; c++) {
							entry->name[c] = tolower(entry->name[c]);
     480:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
     484:	88 c2                	mov    %al,%dl
     486:	80 ea 41             	sub    $0x41,%dl
     489:	80 fa 19             	cmp    $0x19,%dl
     48c:	77 02                	ja     490 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x398>
     48e:	04 20                	add    $0x20,%al
     490:	88 04 0b             	mov    %al,(%ebx,%ecx,1)
					longname_checksum = longname_num = 0;
					foundLongName = false;
				} else {
					// Lowercase basename?
					if(entry->nt_reserved & 0x08) {
						for(c = 0; c < 8; c++) {
     493:	41                   	inc    %ecx
     494:	83 f9 08             	cmp    $0x8,%ecx
     497:	75 e7                	jne    480 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x388>
							entry->name[c] = tolower(entry->name[c]);
						}
					} 

					// Lowercase extension?
					if(entry->nt_reserved & 0x10) {
     499:	f6 85 6c f9 ff ff 10 	testb  $0x10,-0x694(%ebp)
     4a0:	74 1d                	je     4bf <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x3c7>
     4a2:	31 c9                	xor    %ecx,%ecx
						for(c = 0; c < 3; c++) {
							entry->ext[c] = tolower(entry->ext[c]);
     4a4:	0f b6 44 0b 08       	movzbl 0x8(%ebx,%ecx,1),%eax
     4a9:	88 c2                	mov    %al,%dl
     4ab:	80 ea 41             	sub    $0x41,%dl
     4ae:	80 fa 19             	cmp    $0x19,%dl
     4b1:	77 02                	ja     4b5 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x3bd>
     4b3:	04 20                	add    $0x20,%al
     4b5:	88 44 0b 08          	mov    %al,0x8(%ebx,%ecx,1)
						}
					} 

					// Lowercase extension?
					if(entry->nt_reserved & 0x10) {
						for(c = 0; c < 3; c++) {
     4b9:	41                   	inc    %ecx
     4ba:	83 f9 03             	cmp    $0x3,%ecx
     4bd:	75 e5                	jne    4a4 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x3ac>
		/*
		 * Extracts the 8.3 filename for a directory entry, and formats it as a 14-byte
		 * character string.
		 */
		static char* dirent_get_8_3_name(fat_dirent_t *d) {
			char *buf = (char *) kmalloc(16);
     4bf:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
     4c6:	e8 fc ff ff ff       	call   4c7 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x3cf>
     4cb:	89 c2                	mov    %eax,%edx
			memclr(buf, 16);
     4cd:	b8 10 00 00 00       	mov    $0x10,%eax
     4d2:	89 14 24             	mov    %edx,(%esp)
     4d5:	89 95 54 f9 ff ff    	mov    %edx,-0x6ac(%ebp)
     4db:	89 44 24 04          	mov    %eax,0x4(%esp)
     4df:	e8 fc ff ff ff       	call   4e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x3e8>

			unsigned int c = 0;
     4e4:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
     4ea:	31 c9                	xor    %ecx,%ecx
     4ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

			// Copy filename
			for(int i = 0; i < 8; i++) {
				if(d->name[i] != ' ') {
     4f0:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
     4f4:	3c 20                	cmp    $0x20,%al
     4f6:	74 09                	je     501 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x409>
					buf[c++] = d->name[i];
     4f8:	88 04 0a             	mov    %al,(%edx,%ecx,1)
     4fb:	41                   	inc    %ecx
			memclr(buf, 16);

			unsigned int c = 0;

			// Copy filename
			for(int i = 0; i < 8; i++) {
     4fc:	83 f9 08             	cmp    $0x8,%ecx
     4ff:	75 ef                	jne    4f0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x3f8>
					break;
				}
			}

			// Dot
			if(!(d->attributes & FAT_ATTR_DIRECTORY)) {
     501:	f6 43 0b 10          	testb  $0x10,0xb(%ebx)
     505:	0f 84 e5 00 00 00    	je     5f0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x4f8>
		 */
		static char* dirent_get_8_3_name(fat_dirent_t *d) {
			char *buf = (char *) kmalloc(16);
			memclr(buf, 16);

			unsigned int c = 0;
     50b:	31 c0                	xor    %eax,%eax
     50d:	89 b5 6c f9 ff ff    	mov    %esi,-0x694(%ebp)
     513:	89 c6                	mov    %eax,%esi
				buf[c++] = '.';
			}

			// Extension
			for(int i = 0; i < 3; i++) {
				if(d->ext[i] != ' ') {
     515:	0f b6 44 33 08       	movzbl 0x8(%ebx,%esi,1),%eax
     51a:	3c 20                	cmp    $0x20,%al
     51c:	0f 84 8d 01 00 00    	je     6af <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x5b7>
			if(!(d->attributes & FAT_ATTR_DIRECTORY)) {
				buf[c++] = '.';
			}

			// Extension
			for(int i = 0; i < 3; i++) {
     522:	46                   	inc    %esi
				if(d->ext[i] != ' ') {
					buf[c++] = d->ext[i];
     523:	88 04 0a             	mov    %al,(%edx,%ecx,1)
     526:	41                   	inc    %ecx
			if(!(d->attributes & FAT_ATTR_DIRECTORY)) {
				buf[c++] = '.';
			}

			// Extension
			for(int i = 0; i < 3; i++) {
     527:	83 fe 03             	cmp    $0x3,%esi
     52a:	75 e9                	jne    515 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x41d>
     52c:	8b b5 6c f9 ff ff    	mov    -0x694(%ebp),%esi
						}
					}

					// Regular shortname
					char *name = fs_fat32::dirent_get_8_3_name(entry);
					file->i.name = name;
     532:	8b 85 74 f9 ff ff    	mov    -0x68c(%ebp),%eax
     538:	89 50 04             	mov    %edx,0x4(%eax)
				}

				// Save the item
				item = &file->i;
     53b:	8b 95 74 f9 ff ff    	mov    -0x68c(%ebp),%edx
     541:	c6 85 6c f9 ff ff 00 	movb   $0x0,-0x694(%ebp)
			}

			// Set flags
			if(item) {
				item->is_hidden = (entry->attributes & FAT_ATTR_HIDDEN);
     548:	f6 43 0b 02          	testb  $0x2,0xb(%ebx)
     54c:	0f 95 42 0e          	setne  0xe(%edx)
				item->is_system = (entry->attributes & FAT_ATTR_SYSTEM);
     550:	f6 43 0b 04          	testb  $0x4,0xb(%ebx)
     554:	0f 95 42 0f          	setne  0xf(%edx)
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     558:	46                   	inc    %esi

			// Set flags
			if(item) {
				item->is_hidden = (entry->attributes & FAT_ATTR_HIDDEN);
				item->is_system = (entry->attributes & FAT_ATTR_SYSTEM);
				item->is_readonly = (entry->attributes & FAT_ATTR_READ_ONLY);
     559:	0f b6 43 0b          	movzbl 0xb(%ebx),%eax
     55d:	83 e0 01             	and    $0x1,%eax
     560:	88 42 10             	mov    %al,0x10(%edx)

				// Convert the timestamps
				item->time_created = this->convert_timestamp(entry->created_date, entry->created_time, 0);
				item->time_written = this->convert_timestamp(entry->write_date, entry->write_time, 0);
     563:	31 c0                	xor    %eax,%eax
     565:	89 44 24 0c          	mov    %eax,0xc(%esp)
     569:	0f b7 43 16          	movzwl 0x16(%ebx),%eax
     56d:	89 44 24 08          	mov    %eax,0x8(%esp)
     571:	0f b7 43 18          	movzwl 0x18(%ebx),%eax
     575:	89 3c 24             	mov    %edi,(%esp)
     578:	89 95 54 f9 ff ff    	mov    %edx,-0x6ac(%ebp)
     57e:	89 44 24 04          	mov    %eax,0x4(%esp)
     582:	e8 fc ff ff ff       	call   583 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x48b>
     587:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
				item->time_created = this->convert_timestamp(entry->accessed_date, 0, 0);
     58d:	31 c9                	xor    %ecx,%ecx
				item->is_system = (entry->attributes & FAT_ATTR_SYSTEM);
				item->is_readonly = (entry->attributes & FAT_ATTR_READ_ONLY);

				// Convert the timestamps
				item->time_created = this->convert_timestamp(entry->created_date, entry->created_time, 0);
				item->time_written = this->convert_timestamp(entry->write_date, entry->write_time, 0);
     58f:	89 42 1c             	mov    %eax,0x1c(%edx)
				item->time_created = this->convert_timestamp(entry->accessed_date, 0, 0);
     592:	31 d2                	xor    %edx,%edx
     594:	89 54 24 0c          	mov    %edx,0xc(%esp)
     598:	89 4c 24 08          	mov    %ecx,0x8(%esp)
     59c:	0f b7 43 12          	movzwl 0x12(%ebx),%eax
     5a0:	89 3c 24             	mov    %edi,(%esp)
     5a3:	89 44 24 04          	mov    %eax,0x4(%esp)
     5a7:	e8 fc ff ff ff       	call   5a8 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x4b0>
     5ac:	8b 95 54 f9 ff ff    	mov    -0x6ac(%ebp),%edx
     5b2:	89 42 18             	mov    %eax,0x18(%edx)

				/*
				 * To speed up file reads, store the first cluster of this file
				 * in the low 32 bits of the userData field of the item.
				 */
				item->userData = (entry->cluster_high << 16) | (entry->cluster_low);
     5b5:	0f b7 43 14          	movzwl 0x14(%ebx),%eax
     5b9:	0f b7 4b 1a          	movzwl 0x1a(%ebx),%ecx
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     5bd:	83 c3 20             	add    $0x20,%ebx

				/*
				 * To speed up file reads, store the first cluster of this file
				 * in the low 32 bits of the userData field of the item.
				 */
				item->userData = (entry->cluster_high << 16) | (entry->cluster_low);
     5c0:	c1 e0 10             	shl    $0x10,%eax
     5c3:	09 c8                	or     %ecx,%eax
     5c5:	89 c1                	mov    %eax,%ecx
     5c7:	c1 f9 1f             	sar    $0x1f,%ecx
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     5ca:	3b b5 70 f9 ff ff    	cmp    -0x690(%ebp),%esi

				/*
				 * To speed up file reads, store the first cluster of this file
				 * in the low 32 bits of the userData field of the item.
				 */
				item->userData = (entry->cluster_high << 16) | (entry->cluster_low);
     5d0:	89 42 24             	mov    %eax,0x24(%edx)
     5d3:	89 4a 28             	mov    %ecx,0x28(%edx)
		uint16_t name2[6]; // characters 6-11
		uint16_t name3[2]; // characters 12-13
	} longname_buffer[0x3F];

	// Loop over all entries
	for(unsigned int i = 0; i < number; i++) {
     5d6:	0f 85 74 fb ff ff    	jne    150 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x58>
     5dc:	e9 ff fb ff ff       	jmp    1e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0xe8>
     5e1:	eb 0d                	jmp    5f0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x4f8>
     5e3:	90                   	nop
     5e4:	90                   	nop
     5e5:	90                   	nop
     5e6:	90                   	nop
     5e7:	90                   	nop
     5e8:	90                   	nop
     5e9:	90                   	nop
     5ea:	90                   	nop
     5eb:	90                   	nop
     5ec:	90                   	nop
     5ed:	90                   	nop
     5ee:	90                   	nop
     5ef:	90                   	nop
				}
			}

			// Dot
			if(!(d->attributes & FAT_ATTR_DIRECTORY)) {
				buf[c++] = '.';
     5f0:	c6 04 0a 2e          	movb   $0x2e,(%edx,%ecx,1)
     5f4:	41                   	inc    %ecx
     5f5:	e9 11 ff ff ff       	jmp    50b <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x413>
     5fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
				unsigned int c = 0;

				// Handle long name
				if(foundLongName) {
					// Allocate memory
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
     600:	8b 95 68 f9 ff ff    	mov    -0x698(%ebp),%edx
     606:	8d 04 52             	lea    (%edx,%edx,2),%eax
     609:	8d 44 82 01          	lea    0x1(%edx,%eax,4),%eax
     60d:	89 04 24             	mov    %eax,(%esp)
     610:	e8 fc ff ff ff       	call   611 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x519>

/*
 * Converts FAT32-style directory entries into fat_file_t or fat_directory_t
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
     615:	8d 4b 0b             	lea    0xb(%ebx),%ecx
					// Allocate memory
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
					unsigned int newNameLen = 0;

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
     618:	89 da                	mov    %ebx,%edx

/*
 * Converts FAT32-style directory entries into fat_file_t or fat_directory_t
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
     61a:	89 8d 5c f9 ff ff    	mov    %ecx,-0x6a4(%ebp)
	uint16_t FcbNameLen;
	uint8_t sum = 0;

	for(FcbNameLen = 11; FcbNameLen != 0; FcbNameLen--) {
		// NOTE: The operation is an unsigned char rotate right
		sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortName++;
     620:	31 c9                	xor    %ecx,%ecx
     622:	89 b5 58 f9 ff ff    	mov    %esi,-0x6a8(%ebp)
     628:	89 de                	mov    %ebx,%esi
     62a:	8b 9d 5c f9 ff ff    	mov    -0x6a4(%ebp),%ebx
				unsigned int c = 0;

				// Handle long name
				if(foundLongName) {
					// Allocate memory
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
     630:	89 85 6c f9 ff ff    	mov    %eax,-0x694(%ebp)
	uint16_t FcbNameLen;
	uint8_t sum = 0;

	for(FcbNameLen = 11; FcbNameLen != 0; FcbNameLen--) {
		// NOTE: The operation is an unsigned char rotate right
		sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortName++;
     636:	31 c0                	xor    %eax,%eax
     638:	eb 17                	jmp    651 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x559>
     63a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     640:	0f b6 c8             	movzbl %al,%ecx
     643:	89 c8                	mov    %ecx,%eax
     645:	83 e0 01             	and    $0x1,%eax
     648:	83 f8 01             	cmp    $0x1,%eax
     64b:	19 c0                	sbb    %eax,%eax
     64d:	f6 d0                	not    %al
     64f:	24 80                	and    $0x80,%al
     651:	02 02                	add    (%edx),%al
     653:	42                   	inc    %edx
     654:	d1 f9                	sar    %ecx
     656:	00 c8                	add    %cl,%al
 */
uint8_t fs_fat32::lfnCheckSum(unsigned char *shortName) {
	uint16_t FcbNameLen;
	uint8_t sum = 0;

	for(FcbNameLen = 11; FcbNameLen != 0; FcbNameLen--) {
     658:	39 da                	cmp    %ebx,%edx
     65a:	75 e4                	jne    640 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x548>
					// Allocate memory
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
					unsigned int newNameLen = 0;

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
     65c:	38 85 60 f9 ff ff    	cmp    %al,-0x6a0(%ebp)
     662:	89 f3                	mov    %esi,%ebx
     664:	8b b5 58 f9 ff ff    	mov    -0x6a8(%ebp),%esi
     66a:	74 52                	je     6be <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x5c6>

						longname_done: ;
					}

					// Free old name and save new
					kfree(file->i.name);
     66c:	8b 8d 74 f9 ff ff    	mov    -0x68c(%ebp),%ecx
     672:	8b 41 04             	mov    0x4(%ecx),%eax
     675:	89 04 24             	mov    %eax,(%esp)
     678:	e8 fc ff ff ff       	call   679 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x581>
					file->i.name = newName;
     67d:	8b 85 74 f9 ff ff    	mov    -0x68c(%ebp),%eax
     683:	8b 95 6c f9 ff ff    	mov    -0x694(%ebp),%edx

					longname_checksum = longname_num = 0;
     689:	c6 85 60 f9 ff ff 00 	movb   $0x0,-0x6a0(%ebp)
						longname_done: ;
					}

					// Free old name and save new
					kfree(file->i.name);
					file->i.name = newName;
     690:	89 50 04             	mov    %edx,0x4(%eax)

					longname_checksum = longname_num = 0;
     693:	31 c0                	xor    %eax,%eax
     695:	89 85 68 f9 ff ff    	mov    %eax,-0x698(%ebp)
     69b:	e9 9b fe ff ff       	jmp    53b <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x443>
     6a0:	8b b5 74 f9 ff ff    	mov    -0x68c(%ebp),%esi
			// Extension
			for(int i = 0; i < 3; i++) {
				if(d->ext[i] != ' ') {
					buf[c++] = d->ext[i];
				} else {
					buf[c] = 0;
     6a6:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
     6aa:	e9 c4 fc ff ff       	jmp    373 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x27b>
     6af:	8b b5 6c f9 ff ff    	mov    -0x694(%ebp),%esi
     6b5:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
     6b9:	e9 74 fe ff ff       	jmp    532 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x43a>
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
					unsigned int newNameLen = 0;

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
     6be:	8b 85 68 f9 ff ff    	mov    -0x698(%ebp),%eax
     6c4:	85 c0                	test   %eax,%eax
     6c6:	74 a4                	je     66c <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x574>
     6c8:	89 9d 58 f9 ff ff    	mov    %ebx,-0x6a8(%ebp)
     6ce:	8b 9d 6c f9 ff ff    	mov    -0x694(%ebp),%ebx
     6d4:	31 c0                	xor    %eax,%eax
     6d6:	89 85 60 f9 ff ff    	mov    %eax,-0x6a0(%ebp)
     6dc:	8d 8d 7e f9 ff ff    	lea    -0x682(%ebp),%ecx
     6e2:	31 c0                	xor    %eax,%eax
     6e4:	89 b5 5c f9 ff ff    	mov    %esi,-0x6a4(%ebp)
	uint16_t FcbNameLen;
	uint8_t sum = 0;

	for(FcbNameLen = 11; FcbNameLen != 0; FcbNameLen--) {
		// NOTE: The operation is an unsigned char rotate right
		sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortName++;
     6ea:	31 d2                	xor    %edx,%edx
     6ec:	89 c6                	mov    %eax,%esi
					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
							// Copy characters
							for(c = 0; c < 5; c++){
								if(longname_buffer[l].name1[c]) {
     6ee:	0f b7 04 51          	movzwl (%ecx,%edx,2),%eax
     6f2:	85 c0                	test   %eax,%eax
     6f4:	74 52                	je     748 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x650>

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
							// Copy characters
							for(c = 0; c < 5; c++){
     6f6:	42                   	inc    %edx
								if(longname_buffer[l].name1[c]) {
									newName[newNameLen++] = longname_buffer[l].name1[c];
     6f7:	88 04 33             	mov    %al,(%ebx,%esi,1)
     6fa:	46                   	inc    %esi

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
							// Copy characters
							for(c = 0; c < 5; c++){
     6fb:	83 fa 05             	cmp    $0x5,%edx
     6fe:	75 ee                	jne    6ee <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x5f6>
     700:	31 d2                	xor    %edx,%edx
									goto longname_done;
								}
							}

							for(c = 0; c < 6; c++){
								if(longname_buffer[l].name2[c]) {
     702:	0f b7 44 51 0a       	movzwl 0xa(%ecx,%edx,2),%eax
     707:	85 c0                	test   %eax,%eax
     709:	74 3d                	je     748 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x650>
								} else {
									goto longname_done;
								}
							}

							for(c = 0; c < 6; c++){
     70b:	42                   	inc    %edx
								if(longname_buffer[l].name2[c]) {
									newName[newNameLen++] = longname_buffer[l].name2[c];
     70c:	88 04 33             	mov    %al,(%ebx,%esi,1)
     70f:	46                   	inc    %esi
								} else {
									goto longname_done;
								}
							}

							for(c = 0; c < 6; c++){
     710:	83 fa 06             	cmp    $0x6,%edx
     713:	75 ed                	jne    702 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x60a>
									goto longname_done;
								}
							}

							for(c = 0; c < 2; c++){
								if(longname_buffer[l].name3[c]) {
     715:	0f b7 51 16          	movzwl 0x16(%ecx),%edx
     719:	89 f0                	mov    %esi,%eax
     71b:	85 d2                	test   %edx,%edx
     71d:	74 29                	je     748 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x650>
									newName[newNameLen++] = longname_buffer[l].name3[c];
     71f:	88 14 33             	mov    %dl,(%ebx,%esi,1)
									goto longname_done;
								}
							}

							for(c = 0; c < 2; c++){
								if(longname_buffer[l].name3[c]) {
     722:	0f b7 51 18          	movzwl 0x18(%ecx),%edx
     726:	85 d2                	test   %edx,%edx
     728:	74 1e                	je     748 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x650>
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
					unsigned int newNameLen = 0;

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
     72a:	ff 85 60 f9 ff ff    	incl   -0x6a0(%ebp)
								}
							}

							for(c = 0; c < 2; c++){
								if(longname_buffer[l].name3[c]) {
									newName[newNameLen++] = longname_buffer[l].name3[c];
     730:	83 c0 02             	add    $0x2,%eax
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
					unsigned int newNameLen = 0;

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
     733:	83 c1 1a             	add    $0x1a,%ecx
								}
							}

							for(c = 0; c < 2; c++){
								if(longname_buffer[l].name3[c]) {
									newName[newNameLen++] = longname_buffer[l].name3[c];
     736:	88 54 33 01          	mov    %dl,0x1(%ebx,%esi,1)
					char *newName = (char *) kmalloc((longname_num * 13) + 1);
					unsigned int newNameLen = 0;

					// Copy the individual characters
					if(longname_checksum == this->lfnCheckSum((unsigned char *) &entry->name)) {
						for(unsigned int l = 0; l < longname_num; l++) {
     73a:	8b 95 68 f9 ff ff    	mov    -0x698(%ebp),%edx
     740:	39 95 60 f9 ff ff    	cmp    %edx,-0x6a0(%ebp)
     746:	75 a2                	jne    6ea <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x5f2>
     748:	8b b5 5c f9 ff ff    	mov    -0x6a4(%ebp),%esi
     74e:	8b 9d 58 f9 ff ff    	mov    -0x6a8(%ebp),%ebx
     754:	e9 13 ff ff ff       	jmp    66c <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x574>
		}
	}

	// Perform some cleanup after the conversion finishes.
	done: ;
}
     759:	e8 fc ff ff ff       	call   75a <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0+0x662>
     75e:	66 90                	xchg   %ax,%ax

00000760 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory>:

/*
 * Converts FAT32-style directory entries into fat_file_t or fat_directory_t
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
     760:	55                   	push   %ebp
     761:	89 e5                	mov    %esp,%ebp
     763:	83 ec 38             	sub    $0x38,%esp
     766:	89 5d f8             	mov    %ebx,-0x8(%ebp)
     769:	8b 5d 14             	mov    0x14(%ebp),%ebx
     76c:	89 75 fc             	mov    %esi,-0x4(%ebp)
     76f:	8b 45 08             	mov    0x8(%ebp),%eax
     772:	8b 35 00 00 00 00    	mov    0x0,%esi
     778:	89 75 f4             	mov    %esi,-0xc(%ebp)
     77b:	31 f6                	xor    %esi,%esi
     77d:	8b 55 0c             	mov    0xc(%ebp),%edx
     780:	8b 4d 10             	mov    0x10(%ebp),%ecx
	// Sanity checking
	ASSERT(root);
     783:	85 db                	test   %ebx,%ebx
     785:	0f 84 95 00 00 00    	je     820 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0xc0>
	ASSERT(entries);
     78b:	85 d2                	test   %edx,%edx
     78d:	74 51                	je     7e0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0x80>

	if(!number) {
     78f:	85 c9                	test   %ecx,%ecx
     791:	74 2d                	je     7c0 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0x60>
     793:	8b 75 f4             	mov    -0xc(%ebp),%esi
     796:	33 35 00 00 00 00    	xor    0x0,%esi
     79c:	0f 85 b3 00 00 00    	jne    855 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0xf5>
     7a2:	89 5d 08             	mov    %ebx,0x8(%ebp)
		}
	}

	// Perform some cleanup after the conversion finishes.
	done: ;
}
     7a5:	8b 75 fc             	mov    -0x4(%ebp),%esi
     7a8:	8b 5d f8             	mov    -0x8(%ebp),%ebx
     7ab:	89 ec                	mov    %ebp,%esp
     7ad:	5d                   	pop    %ebp
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
	// Sanity checking
	ASSERT(root);
	ASSERT(entries);

	if(!number) {
     7ae:	e9 45 f9 ff ff       	jmp    f8 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory.part.0>
     7b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     7b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
		}
	}

	// Perform some cleanup after the conversion finishes.
	done: ;
}
     7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
     7c3:	33 05 00 00 00 00    	xor    0x0,%eax
     7c9:	0f 85 86 00 00 00    	jne    855 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0xf5>
     7cf:	8b 5d f8             	mov    -0x8(%ebp),%ebx
     7d2:	8b 75 fc             	mov    -0x4(%ebp),%esi
     7d5:	89 ec                	mov    %ebp,%esp
     7d7:	5d                   	pop    %ebp
     7d8:	c3                   	ret    
     7d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
	// Sanity checking
	ASSERT(root);
	ASSERT(entries);
     7e0:	be 1d 19 00 00       	mov    $0x191d,%esi
     7e5:	89 74 24 08          	mov    %esi,0x8(%esp)
     7e9:	be 4e 01 00 00       	mov    $0x14e,%esi
     7ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     7f1:	89 55 e0             	mov    %edx,-0x20(%ebp)
     7f4:	89 4d dc             	mov    %ecx,-0x24(%ebp)
     7f7:	89 74 24 04          	mov    %esi,0x4(%esp)
     7fb:	c7 04 24 13 19 00 00 	movl   $0x1913,(%esp)
     802:	e8 fc ff ff ff       	call   803 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0xa3>
     807:	8b 4d dc             	mov    -0x24(%ebp),%ecx
     80a:	8b 55 e0             	mov    -0x20(%ebp),%edx
     80d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     810:	e9 7a ff ff ff       	jmp    78f <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0x2f>
     815:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 * Converts FAT32-style directory entries into fat_file_t or fat_directory_t
 * objects, and adds them as children of the specified directory.
 */
void fs_fat32::processFATDirEnt(fat_dirent_t *entries, unsigned int number, fs_directory_t *root) {
	// Sanity checking
	ASSERT(root);
     820:	be 0e 19 00 00       	mov    $0x190e,%esi
     825:	89 74 24 08          	mov    %esi,0x8(%esp)
     829:	be 4d 01 00 00       	mov    $0x14d,%esi
     82e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     831:	89 55 e0             	mov    %edx,-0x20(%ebp)
     834:	89 4d dc             	mov    %ecx,-0x24(%ebp)
     837:	89 74 24 04          	mov    %esi,0x4(%esp)
     83b:	c7 04 24 13 19 00 00 	movl   $0x1913,(%esp)
     842:	e8 fc ff ff ff       	call   843 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0xe3>
     847:	8b 4d dc             	mov    -0x24(%ebp),%ecx
     84a:	8b 55 e0             	mov    -0x20(%ebp),%edx
     84d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     850:	e9 36 ff ff ff       	jmp    78b <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0x2b>
		}
	}

	// Perform some cleanup after the conversion finishes.
	done: ;
}
     855:	e8 fc ff ff ff       	call   856 <_ZN8fs_fat3216processFATDirEntEP12fat_dirent_tjP12fs_directory+0xf6>
     85a:	66 90                	xchg   %ax,%ax

0000085c <_ZN8fs_fat3224fatEntryOffsetForClusterEj>:
 * Calculates a cluster's offset into the FAT. The returned structure indicates
 * the sector to read, and the dword offset into that sector. In other words,
 * if the sector is read as an array of bytes, the offset must be multiplied
 * by four.
 */
fat32_secoff_t fs_fat32::fatEntryOffsetForCluster(unsigned int cluster) {
     85c:	55                   	push   %ebp
     85d:	89 e5                	mov    %esp,%ebp
     85f:	83 ec 18             	sub    $0x18,%esp
     862:	89 5d f8             	mov    %ebx,-0x8(%ebp)
     865:	8b 5d 0c             	mov    0xc(%ebp),%ebx
     868:	89 75 fc             	mov    %esi,-0x4(%ebp)
     86b:	8b 45 10             	mov    0x10(%ebp),%eax
     86e:	8b 15 00 00 00 00    	mov    0x0,%edx
     874:	89 55 f4             	mov    %edx,-0xc(%ebp)
     877:	31 d2                	xor    %edx,%edx

	// Number of FAT entries per cluster
	unsigned int entries_per_cluster = cluster_size / 4;

	// Determine size of FAT and normalise cluster
	offset.sector = bpb.reserved_sector_count + (cluster / entries_per_cluster);
     879:	31 d2                	xor    %edx,%edx
 * Calculates a cluster's offset into the FAT. The returned structure indicates
 * the sector to read, and the dword offset into that sector. In other words,
 * if the sector is read as an array of bytes, the offset must be multiplied
 * by four.
 */
fat32_secoff_t fs_fat32::fatEntryOffsetForCluster(unsigned int cluster) {
     87b:	8b 4d 08             	mov    0x8(%ebp),%ecx
	fat32_secoff_t offset;

	// Number of FAT entries per cluster
	unsigned int entries_per_cluster = cluster_size / 4;
     87e:	8b b3 84 02 00 00    	mov    0x284(%ebx),%esi

	// Determine size of FAT and normalise cluster
	offset.sector = bpb.reserved_sector_count + (cluster / entries_per_cluster);
     884:	0f b7 5b 26          	movzwl 0x26(%ebx),%ebx
 */
fat32_secoff_t fs_fat32::fatEntryOffsetForCluster(unsigned int cluster) {
	fat32_secoff_t offset;

	// Number of FAT entries per cluster
	unsigned int entries_per_cluster = cluster_size / 4;
     888:	c1 ee 02             	shr    $0x2,%esi

	// Determine size of FAT and normalise cluster
	offset.sector = bpb.reserved_sector_count + (cluster / entries_per_cluster);
     88b:	f7 f6                	div    %esi
     88d:	01 d8                	add    %ebx,%eax
	offset.offset = cluster % entries_per_cluster;
     88f:	89 51 04             	mov    %edx,0x4(%ecx)

	return offset;
}
     892:	8b 55 f4             	mov    -0xc(%ebp),%edx
     895:	33 15 00 00 00 00    	xor    0x0,%edx

	// Number of FAT entries per cluster
	unsigned int entries_per_cluster = cluster_size / 4;

	// Determine size of FAT and normalise cluster
	offset.sector = bpb.reserved_sector_count + (cluster / entries_per_cluster);
     89b:	89 01                	mov    %eax,(%ecx)
	offset.offset = cluster % entries_per_cluster;

	return offset;
}
     89d:	89 c8                	mov    %ecx,%eax
     89f:	75 0c                	jne    8ad <_ZN8fs_fat3224fatEntryOffsetForClusterEj+0x51>
     8a1:	8b 5d f8             	mov    -0x8(%ebp),%ebx
     8a4:	8b 75 fc             	mov    -0x4(%ebp),%esi
     8a7:	89 ec                	mov    %ebp,%esp
     8a9:	5d                   	pop    %ebp
     8aa:	c2 04 00             	ret    $0x4
     8ad:	e8 fc ff ff ff       	call   8ae <_ZN8fs_fat3224fatEntryOffsetForClusterEj+0x52>
     8b2:	66 90                	xchg   %ax,%ax

000008b4 <_ZN8fs_fat3222clusterChainForClusterEj>:
 * Follows the cluster chain to find all clusters on which the specified
 * starting cluster has data. This *can* be slow.
 *
 * Note that the array returned is terminated by FAT32_END_CHAIN.
 */
unsigned int *fs_fat32::clusterChainForCluster(unsigned int cluster) {
     8b4:	55                   	push   %ebp
     8b5:	89 e5                	mov    %esp,%ebp
     8b7:	57                   	push   %edi
     8b8:	56                   	push   %esi
     8b9:	53                   	push   %ebx
     8ba:	83 ec 4c             	sub    $0x4c,%esp
     8bd:	8b 7d 0c             	mov    0xc(%ebp),%edi
     8c0:	a1 00 00 00 00       	mov    0x0,%eax
     8c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     8c8:	31 c0                	xor    %eax,%eax
     8ca:	8b 5d 08             	mov    0x8(%ebp),%ebx
	unsigned int chain_len = 32;
	unsigned int chain_offset = 0;
	unsigned int *chain = (unsigned int *) kmalloc(sizeof(unsigned int) * chain_len);
     8cd:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
     8d4:	e8 fc ff ff ff       	call   8d5 <_ZN8fs_fat3222clusterChainForClusterEj+0x21>
	unsigned int err;

	fat32_secoff_t off;

	// Guard against broken FS implementations
	if(cluster == 0) {
     8d9:	85 ff                	test   %edi,%edi
 * Note that the array returned is terminated by FAT32_END_CHAIN.
 */
unsigned int *fs_fat32::clusterChainForCluster(unsigned int cluster) {
	unsigned int chain_len = 32;
	unsigned int chain_offset = 0;
	unsigned int *chain = (unsigned int *) kmalloc(sizeof(unsigned int) * chain_len);
     8db:	89 45 d0             	mov    %eax,-0x30(%ebp)
	unsigned int err;

	fat32_secoff_t off;

	// Guard against broken FS implementations
	if(cluster == 0) {
     8de:	0f 84 ec 00 00 00    	je     9d0 <_ZN8fs_fat3222clusterChainForClusterEj+0x11c>
	// Place the initial cluster as the first entry in the chain.
	chain[chain_offset++] = cluster;

	// Repeat until the end is reached (marked by FAT32_END_CHAIN)
	unsigned int nextCluster = cluster;
	while(nextCluster != FAT32_END_CHAIN) {
     8e4:	81 ff f8 ff ff 0f    	cmp    $0xffffff8,%edi
	if(cluster == 0) {
		cluster = 2;
	}

	// Place the initial cluster as the first entry in the chain.
	chain[chain_offset++] = cluster;
     8ea:	89 38                	mov    %edi,(%eax)

	// Repeat until the end is reached (marked by FAT32_END_CHAIN)
	unsigned int nextCluster = cluster;
	while(nextCluster != FAT32_END_CHAIN) {
     8ec:	0f 84 be 00 00 00    	je     9b0 <_ZN8fs_fat3222clusterChainForClusterEj+0xfc>
 * Follows the cluster chain to find all clusters on which the specified
 * starting cluster has data. This *can* be slow.
 *
 * Note that the array returned is terminated by FAT32_END_CHAIN.
 */
unsigned int *fs_fat32::clusterChainForCluster(unsigned int cluster) {
     8f2:	be 01 00 00 00       	mov    $0x1,%esi
     8f7:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
     8fe:	eb 13                	jmp    913 <_ZN8fs_fat3222clusterChainForClusterEj+0x5f>
			chain_len += 32;
			chain = (unsigned int *) krealloc(chain, sizeof(unsigned int) * chain_len);
		}

		// Write into chain array
		chain[chain_offset++] = nextCluster & FAT32_MASK;
     900:	8b 45 d0             	mov    -0x30(%ebp),%eax
     903:	89 3c b0             	mov    %edi,(%eax,%esi,4)
     906:	46                   	inc    %esi
	// Place the initial cluster as the first entry in the chain.
	chain[chain_offset++] = cluster;

	// Repeat until the end is reached (marked by FAT32_END_CHAIN)
	unsigned int nextCluster = cluster;
	while(nextCluster != FAT32_END_CHAIN) {
     907:	81 ff f8 ff ff 0f    	cmp    $0xffffff8,%edi
     90d:	0f 84 9d 00 00 00    	je     9b0 <_ZN8fs_fat3222clusterChainForClusterEj+0xfc>
 */
fat32_secoff_t fs_fat32::fatEntryOffsetForCluster(unsigned int cluster) {
	fat32_secoff_t offset;

	// Number of FAT entries per cluster
	unsigned int entries_per_cluster = cluster_size / 4;
     913:	8b 8b 84 02 00 00    	mov    0x284(%ebx),%ecx

	// Determine size of FAT and normalise cluster
	offset.sector = bpb.reserved_sector_count + (cluster / entries_per_cluster);
     919:	89 f8                	mov    %edi,%eax
     91b:	31 d2                	xor    %edx,%edx
 */
fat32_secoff_t fs_fat32::fatEntryOffsetForCluster(unsigned int cluster) {
	fat32_secoff_t offset;

	// Number of FAT entries per cluster
	unsigned int entries_per_cluster = cluster_size / 4;
     91d:	c1 e9 02             	shr    $0x2,%ecx

	// Determine size of FAT and normalise cluster
	offset.sector = bpb.reserved_sector_count + (cluster / entries_per_cluster);
     920:	f7 f1                	div    %ecx
     922:	89 d7                	mov    %edx,%edi
     924:	0f b7 53 26          	movzwl 0x26(%ebx),%edx
     928:	01 c2                	add    %eax,%edx
	while(nextCluster != FAT32_END_CHAIN) {
		// Read the FAT for this sector
		off = this->fatEntryOffsetForCluster(nextCluster);

		// Read out cluster
		if(this->hal_fs::read_sectors(off.sector, bpb.sectors_per_cluster, fatBuffer, &err)) {
     92a:	8d 45 e0             	lea    -0x20(%ebp),%eax
     92d:	89 44 24 10          	mov    %eax,0x10(%esp)
     931:	8b 83 88 02 00 00    	mov    0x288(%ebx),%eax

	// Number of FAT entries per cluster
	unsigned int entries_per_cluster = cluster_size / 4;

	// Determine size of FAT and normalise cluster
	offset.sector = bpb.reserved_sector_count + (cluster / entries_per_cluster);
     937:	89 55 d4             	mov    %edx,-0x2c(%ebp)
	while(nextCluster != FAT32_END_CHAIN) {
		// Read the FAT for this sector
		off = this->fatEntryOffsetForCluster(nextCluster);

		// Read out cluster
		if(this->hal_fs::read_sectors(off.sector, bpb.sectors_per_cluster, fatBuffer, &err)) {
     93a:	89 44 24 0c          	mov    %eax,0xc(%esp)
     93e:	0f b6 43 25          	movzbl 0x25(%ebx),%eax
     942:	89 54 24 04          	mov    %edx,0x4(%esp)
     946:	89 1c 24             	mov    %ebx,(%esp)
     949:	89 44 24 08          	mov    %eax,0x8(%esp)
     94d:	e8 fc ff ff ff       	call   94e <_ZN8fs_fat3222clusterChainForClusterEj+0x9a>
     952:	85 c0                	test   %eax,%eax
     954:	0f 84 96 00 00 00    	je     9f0 <_ZN8fs_fat3222clusterChainForClusterEj+0x13c>
			nextCluster = fatBuffer[off.offset];
     95a:	8b 83 88 02 00 00    	mov    0x288(%ebx),%eax
			goto error;
		}

		// Is this the end of the chain?
		if(nextCluster >= FAT32_END_CHAIN) {
			nextCluster = FAT32_END_CHAIN;
     960:	ba f8 ff ff 0f       	mov    $0xffffff8,%edx
		// Read the FAT for this sector
		off = this->fatEntryOffsetForCluster(nextCluster);

		// Read out cluster
		if(this->hal_fs::read_sectors(off.sector, bpb.sectors_per_cluster, fatBuffer, &err)) {
			nextCluster = fatBuffer[off.offset];
     965:	8d 3c b8             	lea    (%eax,%edi,4),%edi
     968:	8b 3f                	mov    (%edi),%edi
			goto error;
		}

		// Is this the end of the chain?
		if(nextCluster >= FAT32_END_CHAIN) {
			nextCluster = FAT32_END_CHAIN;
     96a:	81 ff f8 ff ff 0f    	cmp    $0xffffff8,%edi
     970:	0f 43 fa             	cmovae %edx,%edi
		}

		// Expand chain buffer
		if(chain_offset == chain_len) {
     973:	3b 75 cc             	cmp    -0x34(%ebp),%esi
     976:	75 88                	jne    900 <_ZN8fs_fat3222clusterChainForClusterEj+0x4c>
			chain_len += 32;
     978:	8d 56 20             	lea    0x20(%esi),%edx
 * Follows the cluster chain to find all clusters on which the specified
 * starting cluster has data. This *can* be slow.
 *
 * Note that the array returned is terminated by FAT32_END_CHAIN.
 */
unsigned int *fs_fat32::clusterChainForCluster(unsigned int cluster) {
     97b:	89 d0                	mov    %edx,%eax
     97d:	c1 e0 02             	shl    $0x2,%eax
		}

		// Expand chain buffer
		if(chain_offset == chain_len) {
			chain_len += 32;
			chain = (unsigned int *) krealloc(chain, sizeof(unsigned int) * chain_len);
     980:	89 44 24 04          	mov    %eax,0x4(%esp)
     984:	8b 45 d0             	mov    -0x30(%ebp),%eax
			nextCluster = FAT32_END_CHAIN;
		}

		// Expand chain buffer
		if(chain_offset == chain_len) {
			chain_len += 32;
     987:	89 55 cc             	mov    %edx,-0x34(%ebp)
			chain = (unsigned int *) krealloc(chain, sizeof(unsigned int) * chain_len);
     98a:	89 04 24             	mov    %eax,(%esp)
     98d:	e8 fc ff ff ff       	call   98e <_ZN8fs_fat3222clusterChainForClusterEj+0xda>
     992:	89 45 d0             	mov    %eax,-0x30(%ebp)
		}

		// Write into chain array
		chain[chain_offset++] = nextCluster & FAT32_MASK;
     995:	8b 45 d0             	mov    -0x30(%ebp),%eax
     998:	89 3c b0             	mov    %edi,(%eax,%esi,4)
     99b:	46                   	inc    %esi
	// Place the initial cluster as the first entry in the chain.
	chain[chain_offset++] = cluster;

	// Repeat until the end is reached (marked by FAT32_END_CHAIN)
	unsigned int nextCluster = cluster;
	while(nextCluster != FAT32_END_CHAIN) {
     99c:	81 ff f8 ff ff 0f    	cmp    $0xffffff8,%edi
     9a2:	0f 85 6b ff ff ff    	jne    913 <_ZN8fs_fat3222clusterChainForClusterEj+0x5f>
     9a8:	90                   	nop
     9a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

	// Handle an error condition
	error: ;
	kfree(chain);
	return NULL;
}
     9b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     9b3:	33 15 00 00 00 00    	xor    0x0,%edx
     9b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
     9bc:	75 62                	jne    a20 <_ZN8fs_fat3222clusterChainForClusterEj+0x16c>
     9be:	83 c4 4c             	add    $0x4c,%esp
     9c1:	5b                   	pop    %ebx
     9c2:	5e                   	pop    %esi
     9c3:	5f                   	pop    %edi
     9c4:	5d                   	pop    %ebp
     9c5:	c3                   	ret    
     9c6:	8d 76 00             	lea    0x0(%esi),%esi
     9c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
	if(cluster == 0) {
		cluster = 2;
	}

	// Place the initial cluster as the first entry in the chain.
	chain[chain_offset++] = cluster;
     9d0:	8b 45 d0             	mov    -0x30(%ebp),%eax

	fat32_secoff_t off;

	// Guard against broken FS implementations
	if(cluster == 0) {
		cluster = 2;
     9d3:	bf 02 00 00 00       	mov    $0x2,%edi
	}

	// Place the initial cluster as the first entry in the chain.
	chain[chain_offset++] = cluster;
     9d8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
     9de:	e9 0f ff ff ff       	jmp    8f2 <_ZN8fs_fat3222clusterChainForClusterEj+0x3e>
     9e3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     9e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     9f0:	8b 7d d4             	mov    -0x2c(%ebp),%edi

		// Read out cluster
		if(this->hal_fs::read_sectors(off.sector, bpb.sectors_per_cluster, fatBuffer, &err)) {
			nextCluster = fatBuffer[off.offset];
		} else { // read error?
			KERROR("Couldn't read sector %u for FAT", off.sector);
     9f3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
     9fa:	89 7c 24 08          	mov    %edi,0x8(%esp)
     9fe:	bf 84 19 00 00       	mov    $0x1984,%edi
     a03:	89 7c 24 04          	mov    %edi,0x4(%esp)
     a07:	e8 fc ff ff ff       	call   a08 <_ZN8fs_fat3222clusterChainForClusterEj+0x154>

	return chain;

	// Handle an error condition
	error: ;
	kfree(chain);
     a0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
     a0f:	89 04 24             	mov    %eax,(%esp)
     a12:	e8 fc ff ff ff       	call   a13 <_ZN8fs_fat3222clusterChainForClusterEj+0x15f>
	return NULL;
     a17:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
     a1e:	eb 90                	jmp    9b0 <_ZN8fs_fat3222clusterChainForClusterEj+0xfc>
}
     a20:	e8 fc ff ff ff       	call   a21 <_ZN8fs_fat3222clusterChainForClusterEj+0x16d>
     a25:	90                   	nop
     a26:	66 90                	xchg   %ax,%ax

00000a28 <_ZN8fs_fat3211readClusterEjPvPj>:

/*
 * Reads the specified cluster.
 */
void *fs_fat32::readCluster(unsigned int cluster, void *buffer, unsigned int *error) {
     a28:	55                   	push   %ebp
     a29:	89 e5                	mov    %esp,%ebp
     a2b:	53                   	push   %ebx
     a2c:	83 ec 34             	sub    $0x34,%esp
     a2f:	8b 55 08             	mov    0x8(%ebp),%edx
     a32:	a1 00 00 00 00       	mov    0x0,%eax
     a37:	89 45 f4             	mov    %eax,-0xc(%ebp)
     a3a:	31 c0                	xor    %eax,%eax
	unsigned int sector = ((cluster - 2) * bpb.sectors_per_cluster) + first_data_sector;

	if(!this->hal_fs::read_sectors(sector, bpb.sectors_per_cluster, buffer, error)) {
     a3c:	8b 45 14             	mov    0x14(%ebp),%eax
}

/*
 * Reads the specified cluster.
 */
void *fs_fat32::readCluster(unsigned int cluster, void *buffer, unsigned int *error) {
     a3f:	8b 5d 10             	mov    0x10(%ebp),%ebx
	unsigned int sector = ((cluster - 2) * bpb.sectors_per_cluster) + first_data_sector;
     a42:	0f b6 4a 25          	movzbl 0x25(%edx),%ecx

	if(!this->hal_fs::read_sectors(sector, bpb.sectors_per_cluster, buffer, error)) {
     a46:	89 44 24 10          	mov    %eax,0x10(%esp)

/*
 * Reads the specified cluster.
 */
void *fs_fat32::readCluster(unsigned int cluster, void *buffer, unsigned int *error) {
	unsigned int sector = ((cluster - 2) * bpb.sectors_per_cluster) + first_data_sector;
     a4a:	8b 45 0c             	mov    0xc(%ebp),%eax

	if(!this->hal_fs::read_sectors(sector, bpb.sectors_per_cluster, buffer, error)) {
     a4d:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
     a51:	89 4c 24 08          	mov    %ecx,0x8(%esp)

/*
 * Reads the specified cluster.
 */
void *fs_fat32::readCluster(unsigned int cluster, void *buffer, unsigned int *error) {
	unsigned int sector = ((cluster - 2) * bpb.sectors_per_cluster) + first_data_sector;
     a55:	83 e8 02             	sub    $0x2,%eax
     a58:	0f af c1             	imul   %ecx,%eax
     a5b:	8b 8a 80 02 00 00    	mov    0x280(%edx),%ecx

	if(!this->hal_fs::read_sectors(sector, bpb.sectors_per_cluster, buffer, error)) {
     a61:	89 14 24             	mov    %edx,(%esp)

/*
 * Reads the specified cluster.
 */
void *fs_fat32::readCluster(unsigned int cluster, void *buffer, unsigned int *error) {
	unsigned int sector = ((cluster - 2) * bpb.sectors_per_cluster) + first_data_sector;
     a64:	01 c8                	add    %ecx,%eax

	if(!this->hal_fs::read_sectors(sector, bpb.sectors_per_cluster, buffer, error)) {
     a66:	89 44 24 04          	mov    %eax,0x4(%esp)
     a6a:	e8 fc ff ff ff       	call   a6b <_ZN8fs_fat3211readClusterEjPvPj+0x43>
		return NULL;
     a6f:	85 c0                	test   %eax,%eax
     a71:	b8 00 00 00 00       	mov    $0x0,%eax
     a76:	0f 44 d8             	cmove  %eax,%ebx
	}

	return buffer;
}
     a79:	8b 55 f4             	mov    -0xc(%ebp),%edx
     a7c:	33 15 00 00 00 00    	xor    0x0,%edx
     a82:	89 d8                	mov    %ebx,%eax
     a84:	75 06                	jne    a8c <_ZN8fs_fat3211readClusterEjPvPj+0x64>
     a86:	83 c4 34             	add    $0x34,%esp
     a89:	5b                   	pop    %ebx
     a8a:	5d                   	pop    %ebp
     a8b:	c3                   	ret    
     a8c:	e8 fc ff ff ff       	call   a8d <_ZN8fs_fat3211readClusterEjPvPj+0x65>
     a91:	90                   	nop
     a92:	66 90                	xchg   %ax,%ax

00000a94 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj>:
}

/*
 * Reads the directory file (index of files in the directory) of a directory.
 */
fat_dirent_t *fs_fat32::read_dir_file(fs_directory_t *parent, char *childName, unsigned int *entries) {
     a94:	55                   	push   %ebp
     a95:	89 e5                	mov    %esp,%ebp
     a97:	57                   	push   %edi
     a98:	56                   	push   %esi
     a99:	53                   	push   %ebx
     a9a:	83 ec 3c             	sub    $0x3c,%esp
     a9d:	8b 75 0c             	mov    0xc(%ebp),%esi
     aa0:	8b 5d 14             	mov    0x14(%ebp),%ebx
     aa3:	a1 00 00 00 00       	mov    0x0,%eax
     aa8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     aab:	31 c0                	xor    %eax,%eax
     aad:	8b 55 10             	mov    0x10(%ebp),%edx
     ab0:	8b 7d 08             	mov    0x8(%ebp),%edi
	fs_directory_t *target = NULL;

	// Locate the child
	for(unsigned int i = 0; i < parent->children->num_entries; i++) {
     ab3:	8b 46 34             	mov    0x34(%esi),%eax
}

/*
 * Reads the directory file (index of files in the directory) of a directory.
 */
fat_dirent_t *fs_fat32::read_dir_file(fs_directory_t *parent, char *childName, unsigned int *entries) {
     ab6:	89 5d cc             	mov    %ebx,-0x34(%ebp)
     ab9:	89 55 d0             	mov    %edx,-0x30(%ebp)

		return buffer;
	}

	// Directory not found
	return NULL;
     abc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
 */
fat_dirent_t *fs_fat32::read_dir_file(fs_directory_t *parent, char *childName, unsigned int *entries) {
	fs_directory_t *target = NULL;

	// Locate the child
	for(unsigned int i = 0; i < parent->children->num_entries; i++) {
     ac3:	8b 58 08             	mov    0x8(%eax),%ebx
     ac6:	85 db                	test   %ebx,%ebx
     ac8:	0f 84 31 01 00 00    	je     bff <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x16b>
     ace:	89 7d d4             	mov    %edi,-0x2c(%ebp)
     ad1:	31 db                	xor    %ebx,%ebx
     ad3:	89 f7                	mov    %esi,%edi
     ad5:	eb 16                	jmp    aed <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x59>
     ad7:	89 f6                	mov    %esi,%esi
     ad9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     ae0:	8b 47 34             	mov    0x34(%edi),%eax
     ae3:	43                   	inc    %ebx
     ae4:	39 58 08             	cmp    %ebx,0x8(%eax)
     ae7:	0f 86 0b 01 00 00    	jbe    bf8 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x164>
		fs_directory_t *dir = (fs_directory_t *) list_get(parent->children, i);
     aed:	89 5c 24 04          	mov    %ebx,0x4(%esp)
     af1:	89 04 24             	mov    %eax,(%esp)
     af4:	e8 fc ff ff ff       	call   af5 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x61>

		// Ignore non-directory files
		if(dir->i.type == kFSItemTypeDirectory) {
     af9:	81 38 45 52 49 44    	cmpl   $0x44495245,(%eax)
fat_dirent_t *fs_fat32::read_dir_file(fs_directory_t *parent, char *childName, unsigned int *entries) {
	fs_directory_t *target = NULL;

	// Locate the child
	for(unsigned int i = 0; i < parent->children->num_entries; i++) {
		fs_directory_t *dir = (fs_directory_t *) list_get(parent->children, i);
     aff:	89 c6                	mov    %eax,%esi

		// Ignore non-directory files
		if(dir->i.type == kFSItemTypeDirectory) {
     b01:	75 dd                	jne    ae0 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x4c>
			if(!strcasecmp(childName, dir->i.name)) {
     b03:	8b 40 04             	mov    0x4(%eax),%eax
     b06:	8b 55 d0             	mov    -0x30(%ebp),%edx
     b09:	89 44 24 04          	mov    %eax,0x4(%esp)
     b0d:	89 14 24             	mov    %edx,(%esp)
     b10:	e8 fc ff ff ff       	call   b11 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x7d>
     b15:	85 c0                	test   %eax,%eax
     b17:	75 c7                	jne    ae0 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x4c>
		}
	}

	if(target) {
		// Read cluster chain
		unsigned int *chain = this->clusterChainForCluster(target->i.userData & FAT32_MASK);
     b19:	8b 46 24             	mov    0x24(%esi),%eax
     b1c:	8b 7d d4             	mov    -0x2c(%ebp),%edi
     b1f:	25 ff ff ff 0f       	and    $0xfffffff,%eax
     b24:	89 44 24 04          	mov    %eax,0x4(%esp)
     b28:	89 3c 24             	mov    %edi,(%esp)
     b2b:	e8 fc ff ff ff       	call   b2c <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x98>
		unsigned int cnt = 0;
		unsigned int err = 0;
     b30:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}

	if(target) {
		// Read cluster chain
		unsigned int *chain = this->clusterChainForCluster(target->i.userData & FAT32_MASK);
     b37:	89 c2                	mov    %eax,%edx
		unsigned int cnt = 0;
     b39:	31 c0                	xor    %eax,%eax
		unsigned int err = 0;

		while(chain[cnt] != FAT32_END_CHAIN) {
     b3b:	81 3a f8 ff ff 0f    	cmpl   $0xffffff8,(%edx)
     b41:	74 17                	je     b5a <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0xc6>
     b43:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     b49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
			cnt++;
     b50:	40                   	inc    %eax
		// Read cluster chain
		unsigned int *chain = this->clusterChainForCluster(target->i.userData & FAT32_MASK);
		unsigned int cnt = 0;
		unsigned int err = 0;

		while(chain[cnt] != FAT32_END_CHAIN) {
     b51:	81 3c 82 f8 ff ff 0f 	cmpl   $0xffffff8,(%edx,%eax,4)
     b58:	75 f6                	jne    b50 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0xbc>
			cnt++;
		}

		// Allocate required buffer
		unsigned int dir_length = cnt * cluster_size;
     b5a:	8b 8f 84 02 00 00    	mov    0x284(%edi),%ecx
		*entries = dir_length / sizeof(fat_dirent_t);
     b60:	8b 5d cc             	mov    -0x34(%ebp),%ebx
		while(chain[cnt] != FAT32_END_CHAIN) {
			cnt++;
		}

		// Allocate required buffer
		unsigned int dir_length = cnt * cluster_size;
     b63:	0f af c1             	imul   %ecx,%eax
		*entries = dir_length / sizeof(fat_dirent_t);
     b66:	89 c1                	mov    %eax,%ecx
     b68:	c1 e9 05             	shr    $0x5,%ecx
     b6b:	89 0b                	mov    %ecx,(%ebx)

		fat_dirent_t *buffer = (fat_dirent_t *) kmalloc(dir_length);
     b6d:	89 55 c8             	mov    %edx,-0x38(%ebp)
     b70:	89 04 24             	mov    %eax,(%esp)
     b73:	e8 fc ff ff ff       	call   b74 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0xe0>

		// Perform read
		cnt = 0;

		while(true) {
			if(chain[cnt] != FAT32_END_CHAIN) {
     b78:	8b 55 c8             	mov    -0x38(%ebp),%edx
     b7b:	8b 32                	mov    (%edx),%esi

		// Allocate required buffer
		unsigned int dir_length = cnt * cluster_size;
		*entries = dir_length / sizeof(fat_dirent_t);

		fat_dirent_t *buffer = (fat_dirent_t *) kmalloc(dir_length);
     b7d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		// Perform read
		cnt = 0;

		while(true) {
			if(chain[cnt] != FAT32_END_CHAIN) {
     b80:	81 fe f8 ff ff 0f    	cmp    $0xffffff8,%esi
     b86:	74 77                	je     bff <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x16b>
     b88:	8b 87 84 02 00 00    	mov    0x284(%edi),%eax
		*entries = dir_length / sizeof(fat_dirent_t);

		fat_dirent_t *buffer = (fat_dirent_t *) kmalloc(dir_length);

		// Perform read
		cnt = 0;
     b8e:	31 db                	xor    %ebx,%ebx
     b90:	89 55 d0             	mov    %edx,-0x30(%ebp)
     b93:	eb 20                	jmp    bb5 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x121>
     b95:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     b99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

		while(true) {
			if(chain[cnt] != FAT32_END_CHAIN) {
     ba0:	8b 45 d0             	mov    -0x30(%ebp),%eax
				}
			} else {
				break;
			}

			cnt++;
     ba3:	43                   	inc    %ebx

		// Perform read
		cnt = 0;

		while(true) {
			if(chain[cnt] != FAT32_END_CHAIN) {
     ba4:	8b 34 98             	mov    (%eax,%ebx,4),%esi
     ba7:	81 fe f8 ff ff 0f    	cmp    $0xffffff8,%esi
     bad:	74 50                	je     bff <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x16b>
     baf:	8b 87 84 02 00 00    	mov    0x284(%edi),%eax
				unsigned int cluster = chain[cnt];

				if(!this->readCluster(cluster, ((uint8_t *) buffer) + (cnt * cluster_size), &err)) {
     bb5:	8d 55 e0             	lea    -0x20(%ebp),%edx
     bb8:	89 54 24 0c          	mov    %edx,0xc(%esp)
     bbc:	0f af c3             	imul   %ebx,%eax
     bbf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
     bc2:	89 74 24 04          	mov    %esi,0x4(%esp)
     bc6:	89 3c 24             	mov    %edi,(%esp)
     bc9:	01 d0                	add    %edx,%eax
     bcb:	89 44 24 08          	mov    %eax,0x8(%esp)
     bcf:	e8 fc ff ff ff       	call   bd0 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x13c>
     bd4:	85 c0                	test   %eax,%eax
     bd6:	75 c8                	jne    ba0 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x10c>
					KERROR("Error reading directory file %u: %u", cluster, err);
     bd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
     bdb:	bb ac 19 00 00       	mov    $0x19ac,%ebx
     be0:	89 74 24 08          	mov    %esi,0x8(%esp)
     be4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
     be8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
     bef:	89 44 24 0c          	mov    %eax,0xc(%esp)
     bf3:	e8 fc ff ff ff       	call   bf4 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x160>
					return NULL;
     bf8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		return buffer;
	}

	// Directory not found
	return NULL;
}
     bff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     c02:	33 15 00 00 00 00    	xor    0x0,%edx
     c08:	8b 45 d4             	mov    -0x2c(%ebp),%eax
     c0b:	75 08                	jne    c15 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x181>
     c0d:	83 c4 3c             	add    $0x3c,%esp
     c10:	5b                   	pop    %ebx
     c11:	5e                   	pop    %esi
     c12:	5f                   	pop    %edi
     c13:	5d                   	pop    %ebp
     c14:	c3                   	ret    
     c15:	e8 fc ff ff ff       	call   c16 <_ZN8fs_fat3213read_dir_fileEP12fs_directoryPcPj+0x182>
     c1a:	66 90                	xchg   %ax,%ax

00000c1c <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_>:

/*
 * Reads a directory, and constructs an fs_directory_t object for it.
 */
fs_directory_t *fs_fat32::read_directory(fs_directory_t *dir, char *name, bool cache, char *fullpath) {
     c1c:	55                   	push   %ebp
     c1d:	89 e5                	mov    %esp,%ebp
     c1f:	83 ec 48             	sub    $0x48,%esp
     c22:	8b 55 10             	mov    0x10(%ebp),%edx
     c25:	89 75 f8             	mov    %esi,-0x8(%ebp)
     c28:	8b 75 0c             	mov    0xc(%ebp),%esi
     c2b:	a1 00 00 00 00       	mov    0x0,%eax
     c30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     c33:	31 c0                	xor    %eax,%eax
     c35:	89 5d f4             	mov    %ebx,-0xc(%ebp)
     c38:	8b 5d 08             	mov    0x8(%ebp),%ebx
     c3b:	89 55 d0             	mov    %edx,-0x30(%ebp)
     c3e:	8b 55 18             	mov    0x18(%ebp),%edx
	ASSERT(dir);
     c41:	85 f6                	test   %esi,%esi
}

/*
 * Reads a directory, and constructs an fs_directory_t object for it.
 */
fs_directory_t *fs_fat32::read_directory(fs_directory_t *dir, char *name, bool cache, char *fullpath) {
     c43:	89 7d fc             	mov    %edi,-0x4(%ebp)
     c46:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c49:	0f b6 55 14          	movzbl 0x14(%ebp),%edx
     c4d:	88 55 cf             	mov    %dl,-0x31(%ebp)
	ASSERT(dir);
     c50:	0f 84 ea 00 00 00    	je     d40 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x124>
	fs_directory_t *directory = NULL;
	fat_dirent_t *dirBuf = NULL;
	unsigned int dirBufEntries = 0;

	// If caching is enabled, check if this directory's been read
	hal_handle_t handle = (hal_handle_t) hashmap_get(dirHandleCache, fullpath);
     c56:	8b 55 d4             	mov    -0x2c(%ebp),%edx
fs_directory_t *fs_fat32::read_directory(fs_directory_t *dir, char *name, bool cache, char *fullpath) {
	ASSERT(dir);

	fs_directory_t *directory = NULL;
	fat_dirent_t *dirBuf = NULL;
	unsigned int dirBufEntries = 0;
     c59:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	// If caching is enabled, check if this directory's been read
	hal_handle_t handle = (hal_handle_t) hashmap_get(dirHandleCache, fullpath);
     c60:	89 54 24 04          	mov    %edx,0x4(%esp)
     c64:	8b 43 14             	mov    0x14(%ebx),%eax
     c67:	89 04 24             	mov    %eax,(%esp)
     c6a:	e8 fc ff ff ff       	call   c6b <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x4f>

	// Verify the handle is valid
	if(handle) {
     c6f:	85 c0                	test   %eax,%eax
	fs_directory_t *directory = NULL;
	fat_dirent_t *dirBuf = NULL;
	unsigned int dirBufEntries = 0;

	// If caching is enabled, check if this directory's been read
	hal_handle_t handle = (hal_handle_t) hashmap_get(dirHandleCache, fullpath);
     c71:	89 c7                	mov    %eax,%edi

	// Verify the handle is valid
	if(handle) {
     c73:	75 7b                	jne    cf0 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0xd4>
	processHandle: ;

	// No handle? Perform directory read.	
	if(!handle) {
		// Could we read the child dir?
		if(!(dirBuf = this->read_dir_file(dir, name, &dirBufEntries))) {
     c75:	8b 55 d0             	mov    -0x30(%ebp),%edx
     c78:	8d 45 e0             	lea    -0x20(%ebp),%eax
     c7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
     c7f:	89 74 24 04          	mov    %esi,0x4(%esp)
     c83:	89 1c 24             	mov    %ebx,(%esp)
     c86:	89 54 24 08          	mov    %edx,0x8(%esp)
     c8a:	e8 fc ff ff ff       	call   c8b <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x6f>
     c8f:	89 c7                	mov    %eax,%edi
			return NULL;
     c91:	31 c0                	xor    %eax,%eax
	processHandle: ;

	// No handle? Perform directory read.	
	if(!handle) {
		// Could we read the child dir?
		if(!(dirBuf = this->read_dir_file(dir, name, &dirBufEntries))) {
     c93:	85 ff                	test   %edi,%edi
     c95:	74 35                	je     ccc <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0xb0>
			return NULL;
		}

		// Convert to directory handle
		fs_directory_t *currentDir = hal_vfs_allocate_directory(true);
     c97:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
     c9e:	e8 fc ff ff ff       	call   c9f <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x83>
		this->processFATDirEnt(dirBuf, dirBufEntries, currentDir);
     ca3:	8b 55 e0             	mov    -0x20(%ebp),%edx
     ca6:	89 7c 24 04          	mov    %edi,0x4(%esp)
     caa:	89 1c 24             	mov    %ebx,(%esp)
     cad:	89 54 24 08          	mov    %edx,0x8(%esp)
     cb1:	89 44 24 0c          	mov    %eax,0xc(%esp)
     cb5:	89 45 c8             	mov    %eax,-0x38(%ebp)
     cb8:	e8 fc ff ff ff       	call   cb9 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x9d>

		currentDir->parent = dir->i.handle;
     cbd:	8b 56 14             	mov    0x14(%esi),%edx
     cc0:	8b 45 c8             	mov    -0x38(%ebp),%eax

		if(cache) {
     cc3:	80 7d cf 00          	cmpb   $0x0,-0x31(%ebp)

		// Convert to directory handle
		fs_directory_t *currentDir = hal_vfs_allocate_directory(true);
		this->processFATDirEnt(dirBuf, dirBufEntries, currentDir);

		currentDir->parent = dir->i.handle;
     cc7:	89 50 30             	mov    %edx,0x30(%eax)

		if(cache) {
     cca:	75 54                	jne    d20 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x104>
		directory = currentDir;
	}

	// Return directory
	return directory;
}
     ccc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     ccf:	33 15 00 00 00 00    	xor    0x0,%edx
     cd5:	0f 85 88 00 00 00    	jne    d63 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x147>
     cdb:	8b 5d f4             	mov    -0xc(%ebp),%ebx
     cde:	8b 75 f8             	mov    -0x8(%ebp),%esi
     ce1:	8b 7d fc             	mov    -0x4(%ebp),%edi
     ce4:	89 ec                	mov    %ebp,%esp
     ce6:	5d                   	pop    %ebp
     ce7:	c3                   	ret    
     ce8:	90                   	nop
     ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	// If caching is enabled, check if this directory's been read
	hal_handle_t handle = (hal_handle_t) hashmap_get(dirHandleCache, fullpath);

	// Verify the handle is valid
	if(handle) {
		if(hal_handle_get_type(handle) != kFSItemTypeDirectory) {
     cf0:	89 04 24             	mov    %eax,(%esp)
     cf3:	e8 fc ff ff ff       	call   cf4 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0xd8>
     cf8:	3d 45 52 49 44       	cmp    $0x44495245,%eax
     cfd:	0f 85 72 ff ff ff    	jne    c75 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x59>
			handle = 0;
			goto processHandle;
		}

		// Get object from the handle and verify it is good
		directory = (fs_directory_t *) hal_handle_get_object(handle);
     d03:	89 3c 24             	mov    %edi,(%esp)
     d06:	e8 fc ff ff ff       	call   d07 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0xeb>
		if(directory->i.type != kFSItemTypeDirectory) {
     d0b:	81 38 45 52 49 44    	cmpl   $0x44495245,(%eax)
     d11:	0f 85 5e ff ff ff    	jne    c75 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x59>
     d17:	eb b3                	jmp    ccc <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0xb0>
     d19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		this->processFATDirEnt(dirBuf, dirBufEntries, currentDir);

		currentDir->parent = dir->i.handle;

		if(cache) {
			hashmap_insert(dirHandleCache, fullpath, (void *) currentDir->i.handle);
     d20:	8b 50 14             	mov    0x14(%eax),%edx
     d23:	89 54 24 08          	mov    %edx,0x8(%esp)
     d27:	8b 55 d4             	mov    -0x2c(%ebp),%edx
     d2a:	89 54 24 04          	mov    %edx,0x4(%esp)
     d2e:	8b 53 14             	mov    0x14(%ebx),%edx
     d31:	89 14 24             	mov    %edx,(%esp)
     d34:	e8 fc ff ff ff       	call   d35 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x119>
     d39:	8b 45 c8             	mov    -0x38(%ebp),%eax
     d3c:	eb 8e                	jmp    ccc <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0xb0>
     d3e:	66 90                	xchg   %ax,%ax

/*
 * Reads a directory, and constructs an fs_directory_t object for it.
 */
fs_directory_t *fs_fat32::read_directory(fs_directory_t *dir, char *name, bool cache, char *fullpath) {
	ASSERT(dir);
     d40:	bf 25 19 00 00       	mov    $0x1925,%edi
     d45:	b8 f5 00 00 00       	mov    $0xf5,%eax
     d4a:	89 7c 24 08          	mov    %edi,0x8(%esp)
     d4e:	89 44 24 04          	mov    %eax,0x4(%esp)
     d52:	c7 04 24 13 19 00 00 	movl   $0x1913,(%esp)
     d59:	e8 fc ff ff ff       	call   d5a <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x13e>
     d5e:	e9 f3 fe ff ff       	jmp    c56 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x3a>
		directory = currentDir;
	}

	// Return directory
	return directory;
}
     d63:	e8 fc ff ff ff       	call   d64 <_ZN8fs_fat3214read_directoryEP12fs_directoryPcbS2_+0x148>

00000d68 <_ZN8fs_fat3214list_directoryEPcb>:

fs_directory_t* fs_fat32::list_directory(char* dirname, bool cache) {
     d68:	55                   	push   %ebp
     d69:	89 e5                	mov    %esp,%ebp
     d6b:	57                   	push   %edi
     d6c:	56                   	push   %esi
     d6d:	53                   	push   %ebx
     d6e:	83 ec 5c             	sub    $0x5c,%esp
     d71:	8b 55 08             	mov    0x8(%ebp),%edx
     d74:	8b 5d 0c             	mov    0xc(%ebp),%ebx
     d77:	a1 00 00 00 00       	mov    0x0,%eax
     d7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     d7f:	31 c0                	xor    %eax,%eax
     d81:	89 55 d0             	mov    %edx,-0x30(%ebp)
     d84:	0f b6 55 10          	movzbl 0x10(%ebp),%edx
     d88:	88 55 d4             	mov    %dl,-0x2c(%ebp)
	fs_directory_t *directory = root_directory;
     d8b:	8b 55 d0             	mov    -0x30(%ebp),%edx
     d8e:	8b 7a 08             	mov    0x8(%edx),%edi

	char *currentPath = (char *) kmalloc(strlen(dirname) + 2);
     d91:	89 1c 24             	mov    %ebx,(%esp)
     d94:	e8 fc ff ff ff       	call   d95 <_ZN8fs_fat3214list_directoryEPcb+0x2d>
     d99:	83 c0 02             	add    $0x2,%eax
     d9c:	89 04 24             	mov    %eax,(%esp)
     d9f:	e8 fc ff ff ff       	call   da0 <_ZN8fs_fat3214list_directoryEPcb+0x38>
	unsigned int currentPathOffset = 0;

	currentPath[currentPathOffset++] = '/';

	// Separate path string
	list_t *components = this->split_path(dirname);
     da4:	8b 55 d0             	mov    -0x30(%ebp),%edx
	fs_directory_t *directory = root_directory;

	char *currentPath = (char *) kmalloc(strlen(dirname) + 2);
	unsigned int currentPathOffset = 0;

	currentPath[currentPathOffset++] = '/';
     da7:	c6 00 2f             	movb   $0x2f,(%eax)
}

fs_directory_t* fs_fat32::list_directory(char* dirname, bool cache) {
	fs_directory_t *directory = root_directory;

	char *currentPath = (char *) kmalloc(strlen(dirname) + 2);
     daa:	89 45 c8             	mov    %eax,-0x38(%ebp)
	unsigned int currentPathOffset = 0;

	currentPath[currentPathOffset++] = '/';

	// Separate path string
	list_t *components = this->split_path(dirname);
     dad:	89 14 24             	mov    %edx,(%esp)
     db0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
     db4:	e8 fc ff ff ff       	call   db5 <_ZN8fs_fat3214list_directoryEPcb+0x4d>

	// Iterate over each component
	for(unsigned int i = 0; i < components->num_entries; i++) {
     db9:	8b 48 08             	mov    0x8(%eax),%ecx
	unsigned int currentPathOffset = 0;

	currentPath[currentPathOffset++] = '/';

	// Separate path string
	list_t *components = this->split_path(dirname);
     dbc:	89 c2                	mov    %eax,%edx

	// Iterate over each component
	for(unsigned int i = 0; i < components->num_entries; i++) {
     dbe:	85 c9                	test   %ecx,%ecx
     dc0:	0f 84 86 00 00 00    	je     e4c <_ZN8fs_fat3214list_directoryEPcb+0xe4>
     dc6:	0f b6 45 d4          	movzbl -0x2c(%ebp),%eax
	fs_directory_t *directory = root_directory;

	char *currentPath = (char *) kmalloc(strlen(dirname) + 2);
	unsigned int currentPathOffset = 0;

	currentPath[currentPathOffset++] = '/';
     dca:	89 d1                	mov    %edx,%ecx

	// Separate path string
	list_t *components = this->split_path(dirname);

	// Iterate over each component
	for(unsigned int i = 0; i < components->num_entries; i++) {
     dcc:	31 f6                	xor    %esi,%esi
	fs_directory_t *directory = root_directory;

	char *currentPath = (char *) kmalloc(strlen(dirname) + 2);
	unsigned int currentPathOffset = 0;

	currentPath[currentPathOffset++] = '/';
     dce:	89 fa                	mov    %edi,%edx
     dd0:	8b 7d c8             	mov    -0x38(%ebp),%edi
     dd3:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)

	// Separate path string
	list_t *components = this->split_path(dirname);

	// Iterate over each component
	for(unsigned int i = 0; i < components->num_entries; i++) {
     dda:	89 45 cc             	mov    %eax,-0x34(%ebp)
     ddd:	eb 07                	jmp    de6 <_ZN8fs_fat3214list_directoryEPcb+0x7e>
     ddf:	90                   	nop
     de0:	46                   	inc    %esi
     de1:	39 71 08             	cmp    %esi,0x8(%ecx)
     de4:	76 64                	jbe    e4a <_ZN8fs_fat3214list_directoryEPcb+0xe2>
		// Append path name
		char *component = (char *) list_get(components, i);
     de6:	89 0c 24             	mov    %ecx,(%esp)
     de9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
     dec:	89 55 c0             	mov    %edx,-0x40(%ebp)
     def:	89 74 24 04          	mov    %esi,0x4(%esp)
     df3:	e8 fc ff ff ff       	call   df4 <_ZN8fs_fat3214list_directoryEPcb+0x8c>
     df8:	89 c3                	mov    %eax,%ebx

		strcat(currentPath + currentPathOffset, component);
     dfa:	89 44 24 04          	mov    %eax,0x4(%esp)
     dfe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
     e01:	01 f8                	add    %edi,%eax
     e03:	89 04 24             	mov    %eax,(%esp)
     e06:	e8 fc ff ff ff       	call   e07 <_ZN8fs_fat3214list_directoryEPcb+0x9f>
		currentPathOffset += strlen(component);
     e0b:	89 1c 24             	mov    %ebx,(%esp)
     e0e:	e8 fc ff ff ff       	call   e0f <_ZN8fs_fat3214list_directoryEPcb+0xa7>
     e13:	8b 55 d4             	mov    -0x2c(%ebp),%edx
     e16:	01 d0                	add    %edx,%eax
		currentPath[currentPathOffset++] = '/';
     e18:	c6 04 07 2f          	movb   $0x2f,(%edi,%eax,1)
     e1c:	40                   	inc    %eax

		// Get the directoryn
		if(!(directory = this->read_directory(directory, component, cache, currentPath))) {
     e1d:	8b 55 c0             	mov    -0x40(%ebp),%edx
		// Append path name
		char *component = (char *) list_get(components, i);

		strcat(currentPath + currentPathOffset, component);
		currentPathOffset += strlen(component);
		currentPath[currentPathOffset++] = '/';
     e20:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		// Get the directoryn
		if(!(directory = this->read_directory(directory, component, cache, currentPath))) {
     e23:	8b 45 cc             	mov    -0x34(%ebp),%eax
     e26:	89 7c 24 10          	mov    %edi,0x10(%esp)
     e2a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
     e2e:	89 54 24 04          	mov    %edx,0x4(%esp)
     e32:	8b 55 d0             	mov    -0x30(%ebp),%edx
     e35:	89 44 24 0c          	mov    %eax,0xc(%esp)
     e39:	89 14 24             	mov    %edx,(%esp)
     e3c:	e8 fc ff ff ff       	call   e3d <_ZN8fs_fat3214list_directoryEPcb+0xd5>
     e41:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
     e44:	85 c0                	test   %eax,%eax
     e46:	89 c2                	mov    %eax,%edx
     e48:	75 96                	jne    de0 <_ZN8fs_fat3214list_directoryEPcb+0x78>
     e4a:	89 d7                	mov    %edx,%edi
			return NULL;
		}
	}

	return directory;
}
     e4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     e4f:	33 15 00 00 00 00    	xor    0x0,%edx
     e55:	89 f8                	mov    %edi,%eax
     e57:	75 08                	jne    e61 <_ZN8fs_fat3214list_directoryEPcb+0xf9>
     e59:	83 c4 5c             	add    $0x5c,%esp
     e5c:	5b                   	pop    %ebx
     e5d:	5e                   	pop    %esi
     e5e:	5f                   	pop    %edi
     e5f:	5d                   	pop    %ebp
     e60:	c3                   	ret    
     e61:	e8 fc ff ff ff       	call   e62 <_ZN8fs_fat3214list_directoryEPcb+0xfa>
     e66:	66 90                	xchg   %ax,%ax

00000e68 <_ZN8fs_fat3213read_root_dirEv>:
}

/*
 * Read the root directory from the disk, bypassing caching.
 */
void fs_fat32::read_root_dir(void) {
     e68:	55                   	push   %ebp
     e69:	89 e5                	mov    %esp,%ebp
     e6b:	57                   	push   %edi
     e6c:	56                   	push   %esi
     e6d:	53                   	push   %ebx
     e6e:	83 ec 3c             	sub    $0x3c,%esp
     e71:	8b 7d 08             	mov    0x8(%ebp),%edi
     e74:	a1 00 00 00 00       	mov    0x0,%eax
     e79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     e7c:	31 c0                	xor    %eax,%eax
	unsigned int err;

	// Release previous root directory, if it exists
	if(root_directory) {
     e7e:	8b 5f 08             	mov    0x8(%edi),%ebx
     e81:	85 db                	test   %ebx,%ebx
     e83:	0f 84 47 01 00 00    	je     fd0 <_ZN8fs_fat3213read_root_dirEv+0x168>
		fs_directory_t *new_root = hal_vfs_allocate_directory(false);
     e89:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
     e90:	e8 fc ff ff ff       	call   e91 <_ZN8fs_fat3213read_root_dirEv+0x29>

		hal_vfs_deallocate_directory(root_directory, new_root);
     e95:	89 44 24 04          	mov    %eax,0x4(%esp)
void fs_fat32::read_root_dir(void) {
	unsigned int err;

	// Release previous root directory, if it exists
	if(root_directory) {
		fs_directory_t *new_root = hal_vfs_allocate_directory(false);
     e99:	89 c3                	mov    %eax,%ebx

		hal_vfs_deallocate_directory(root_directory, new_root);
     e9b:	8b 47 08             	mov    0x8(%edi),%eax
     e9e:	89 04 24             	mov    %eax,(%esp)
     ea1:	e8 fc ff ff ff       	call   ea2 <_ZN8fs_fat3213read_root_dirEv+0x3a>

		root_directory = new_root;
     ea6:	89 5f 08             	mov    %ebx,0x8(%edi)
	} else {
		root_directory = hal_vfs_allocate_directory(true);
	}

	// Follow the cluster chain for the root directory.
	unsigned int *root_clusters = this->clusterChainForCluster(bpb.root_cluster & FAT32_MASK);
     ea9:	8b 47 44             	mov    0x44(%edi),%eax
     eac:	89 3c 24             	mov    %edi,(%esp)
     eaf:	25 ff ff ff 0f       	and    $0xfffffff,%eax
     eb4:	89 44 24 04          	mov    %eax,0x4(%esp)
     eb8:	e8 fc ff ff ff       	call   eb9 <_ZN8fs_fat3213read_root_dirEv+0x51>
	unsigned int cnt = 0;

	while(root_clusters[cnt] != FAT32_END_CHAIN) {
     ebd:	81 38 f8 ff ff 0f    	cmpl   $0xffffff8,(%eax)
	} else {
		root_directory = hal_vfs_allocate_directory(true);
	}

	// Follow the cluster chain for the root directory.
	unsigned int *root_clusters = this->clusterChainForCluster(bpb.root_cluster & FAT32_MASK);
     ec3:	89 c2                	mov    %eax,%edx
	unsigned int cnt = 0;

	while(root_clusters[cnt] != FAT32_END_CHAIN) {
     ec5:	0f 84 19 01 00 00    	je     fe4 <_ZN8fs_fat3213read_root_dirEv+0x17c>
     ecb:	31 c0                	xor    %eax,%eax
     ecd:	8d 76 00             	lea    0x0(%esi),%esi
		cnt++;
     ed0:	40                   	inc    %eax

	// Follow the cluster chain for the root directory.
	unsigned int *root_clusters = this->clusterChainForCluster(bpb.root_cluster & FAT32_MASK);
	unsigned int cnt = 0;

	while(root_clusters[cnt] != FAT32_END_CHAIN) {
     ed1:	81 3c 82 f8 ff ff 0f 	cmpl   $0xffffff8,(%edx,%eax,4)
     ed8:	75 f6                	jne    ed0 <_ZN8fs_fat3213read_root_dirEv+0x68>
     eda:	8b 8f 84 02 00 00    	mov    0x284(%edi),%ecx
     ee0:	0f af c1             	imul   %ecx,%eax
     ee3:	89 c1                	mov    %eax,%ecx
     ee5:	c1 e9 05             	shr    $0x5,%ecx
     ee8:	89 4d cc             	mov    %ecx,-0x34(%ebp)

	// Allocate memory for root directory
	unsigned int root_dir_len = cnt * cluster_size;
	unsigned int root_dir_num_entries = root_dir_len / sizeof(fat_dirent_t);

	fat_dirent_t *buffer = (fat_dirent_t *) kmalloc(root_dir_len);
     eeb:	89 55 c8             	mov    %edx,-0x38(%ebp)
     eee:	89 04 24             	mov    %eax,(%esp)
     ef1:	e8 fc ff ff ff       	call   ef2 <_ZN8fs_fat3213read_root_dirEv+0x8a>

	// Read the root directory's sectors.
	cnt = 0;

	while(true) {
		if(root_clusters[cnt] != FAT32_END_CHAIN) {
     ef6:	8b 55 c8             	mov    -0x38(%ebp),%edx
     ef9:	8b 32                	mov    (%edx),%esi

	// Allocate memory for root directory
	unsigned int root_dir_len = cnt * cluster_size;
	unsigned int root_dir_num_entries = root_dir_len / sizeof(fat_dirent_t);

	fat_dirent_t *buffer = (fat_dirent_t *) kmalloc(root_dir_len);
     efb:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	// Read the root directory's sectors.
	cnt = 0;

	while(true) {
		if(root_clusters[cnt] != FAT32_END_CHAIN) {
     efe:	81 fe f8 ff ff 0f    	cmp    $0xffffff8,%esi
     f04:	74 7d                	je     f83 <_ZN8fs_fat3213read_root_dirEv+0x11b>
     f06:	8b 87 84 02 00 00    	mov    0x284(%edi),%eax
	unsigned int root_dir_num_entries = root_dir_len / sizeof(fat_dirent_t);

	fat_dirent_t *buffer = (fat_dirent_t *) kmalloc(root_dir_len);

	// Read the root directory's sectors.
	cnt = 0;
     f0c:	31 db                	xor    %ebx,%ebx
     f0e:	89 55 d0             	mov    %edx,-0x30(%ebp)
     f11:	eb 22                	jmp    f35 <_ZN8fs_fat3213read_root_dirEv+0xcd>
     f13:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     f19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

	while(true) {
		if(root_clusters[cnt] != FAT32_END_CHAIN) {
     f20:	8b 45 d0             	mov    -0x30(%ebp),%eax
			}
		} else {
			break;
		}

		cnt++;
     f23:	43                   	inc    %ebx

	// Read the root directory's sectors.
	cnt = 0;

	while(true) {
		if(root_clusters[cnt] != FAT32_END_CHAIN) {
     f24:	8b 34 98             	mov    (%eax,%ebx,4),%esi
     f27:	81 fe f8 ff ff 0f    	cmp    $0xffffff8,%esi
     f2d:	74 51                	je     f80 <_ZN8fs_fat3213read_root_dirEv+0x118>
     f2f:	8b 87 84 02 00 00    	mov    0x284(%edi),%eax
			unsigned int cluster = root_clusters[cnt];

			if(!this->readCluster(cluster, ((uint8_t *) buffer) + (cnt * cluster_size), &err)) {
     f35:	8d 55 e0             	lea    -0x20(%ebp),%edx
     f38:	89 54 24 0c          	mov    %edx,0xc(%esp)
     f3c:	0f af c3             	imul   %ebx,%eax
     f3f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
     f42:	89 74 24 04          	mov    %esi,0x4(%esp)
     f46:	89 3c 24             	mov    %edi,(%esp)
     f49:	01 d0                	add    %edx,%eax
     f4b:	89 44 24 08          	mov    %eax,0x8(%esp)
     f4f:	e8 fc ff ff ff       	call   f50 <_ZN8fs_fat3213read_root_dirEv+0xe8>
     f54:	85 c0                	test   %eax,%eax
     f56:	75 c8                	jne    f20 <_ZN8fs_fat3213read_root_dirEv+0xb8>
				KERROR("Error reading root dir cluster %u: %u", cluster, err);
     f58:	8b 45 e0             	mov    -0x20(%ebp),%eax
     f5b:	bb d8 19 00 00       	mov    $0x19d8,%ebx
     f60:	89 74 24 08          	mov    %esi,0x8(%esp)
     f64:	89 5c 24 04          	mov    %ebx,0x4(%esp)
     f68:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
     f6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
     f73:	e8 fc ff ff ff       	call   f74 <_ZN8fs_fat3213read_root_dirEv+0x10c>
				return;
     f78:	eb 3f                	jmp    fb9 <_ZN8fs_fat3213read_root_dirEv+0x151>
     f7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     f80:	8b 55 d0             	mov    -0x30(%ebp),%edx

		cnt++;
	}

	// Process the read FAT directory entries into fs_file_t structs
	this->processFATDirEnt(buffer, root_dir_num_entries, root_directory);
     f83:	8b 47 08             	mov    0x8(%edi),%eax
     f86:	8b 4d cc             	mov    -0x34(%ebp),%ecx
     f89:	89 55 c8             	mov    %edx,-0x38(%ebp)
     f8c:	89 3c 24             	mov    %edi,(%esp)
     f8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
     f93:	8b 45 d4             	mov    -0x2c(%ebp),%eax
     f96:	89 4c 24 08          	mov    %ecx,0x8(%esp)
     f9a:	89 44 24 04          	mov    %eax,0x4(%esp)
     f9e:	e8 fc ff ff ff       	call   f9f <_ZN8fs_fat3213read_root_dirEv+0x137>

	// Clean up temporary buffers needed to read root directory
	kfree(root_clusters);
     fa3:	8b 55 c8             	mov    -0x38(%ebp),%edx
     fa6:	89 14 24             	mov    %edx,(%esp)
     fa9:	e8 fc ff ff ff       	call   faa <_ZN8fs_fat3213read_root_dirEv+0x142>
	kfree(buffer);
     fae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
     fb1:	89 04 24             	mov    %eax,(%esp)
     fb4:	e8 fc ff ff ff       	call   fb5 <_ZN8fs_fat3213read_root_dirEv+0x14d>
}
     fb9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     fbc:	33 15 00 00 00 00    	xor    0x0,%edx
     fc2:	75 2e                	jne    ff2 <_ZN8fs_fat3213read_root_dirEv+0x18a>
     fc4:	83 c4 3c             	add    $0x3c,%esp
     fc7:	5b                   	pop    %ebx
     fc8:	5e                   	pop    %esi
     fc9:	5f                   	pop    %edi
     fca:	5d                   	pop    %ebp
     fcb:	c3                   	ret    
     fcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

		hal_vfs_deallocate_directory(root_directory, new_root);

		root_directory = new_root;
	} else {
		root_directory = hal_vfs_allocate_directory(true);
     fd0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
     fd7:	e8 fc ff ff ff       	call   fd8 <_ZN8fs_fat3213read_root_dirEv+0x170>
     fdc:	89 47 08             	mov    %eax,0x8(%edi)
     fdf:	e9 c5 fe ff ff       	jmp    ea9 <_ZN8fs_fat3213read_root_dirEv+0x41>

	// Follow the cluster chain for the root directory.
	unsigned int *root_clusters = this->clusterChainForCluster(bpb.root_cluster & FAT32_MASK);
	unsigned int cnt = 0;

	while(root_clusters[cnt] != FAT32_END_CHAIN) {
     fe4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     feb:	31 c0                	xor    %eax,%eax
     fed:	e9 f9 fe ff ff       	jmp    eeb <_ZN8fs_fat3213read_root_dirEv+0x83>
	this->processFATDirEnt(buffer, root_dir_num_entries, root_directory);

	// Clean up temporary buffers needed to read root directory
	kfree(root_clusters);
	kfree(buffer);
}
     ff2:	e8 fc ff ff ff       	call   ff3 <_ZN8fs_fat3213read_root_dirEv+0x18b>
     ff7:	90                   	nop

00000ff8 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk>:
#define DEBUG_DIRECTORY_CACHING	0

/*
 * Initialises a FAT32 filesystem from the specified partition table entry.
 */
fs_fat32::fs_fat32(hal_disk_partition_t *p, hal_disk_t *d) : hal_fs::hal_fs(p, d) {
     ff8:	55                   	push   %ebp
     ff9:	89 e5                	mov    %esp,%ebp
     ffb:	57                   	push   %edi
     ffc:	56                   	push   %esi
     ffd:	53                   	push   %ebx
     ffe:	83 ec 3c             	sub    $0x3c,%esp
    1001:	a1 00 00 00 00       	mov    0x0,%eax
    1006:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    1009:	31 c0                	xor    %eax,%eax
    100b:	8b 45 10             	mov    0x10(%ebp),%eax
	unsigned int err = 0;

	// Read sector 0 of partition synchronously
	if(!this->hal_fs::read_sectors(0, 1, &bpb, &err)) {
    100e:	8d 75 e0             	lea    -0x20(%ebp),%esi
#define DEBUG_DIRECTORY_CACHING	0

/*
 * Initialises a FAT32 filesystem from the specified partition table entry.
 */
fs_fat32::fs_fat32(hal_disk_partition_t *p, hal_disk_t *d) : hal_fs::hal_fs(p, d) {
    1011:	8b 5d 08             	mov    0x8(%ebp),%ebx
    1014:	89 44 24 08          	mov    %eax,0x8(%esp)
    1018:	8b 45 0c             	mov    0xc(%ebp),%eax
    101b:	89 1c 24             	mov    %ebx,(%esp)
    101e:	89 44 24 04          	mov    %eax,0x4(%esp)
    1022:	e8 fc ff ff ff       	call   1023 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x2b>
	unsigned int err = 0;

	// Read sector 0 of partition synchronously
	if(!this->hal_fs::read_sectors(0, 1, &bpb, &err)) {
    1027:	8d 43 18             	lea    0x18(%ebx),%eax
    102a:	89 44 24 0c          	mov    %eax,0xc(%esp)
    102e:	b8 01 00 00 00       	mov    $0x1,%eax
    1033:	89 44 24 08          	mov    %eax,0x8(%esp)
    1037:	31 c0                	xor    %eax,%eax

/*
 * Initialises a FAT32 filesystem from the specified partition table entry.
 */
fs_fat32::fs_fat32(hal_disk_partition_t *p, hal_disk_t *d) : hal_fs::hal_fs(p, d) {
	unsigned int err = 0;
    1039:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	// Read sector 0 of partition synchronously
	if(!this->hal_fs::read_sectors(0, 1, &bpb, &err)) {
    1040:	89 74 24 10          	mov    %esi,0x10(%esp)
    1044:	89 44 24 04          	mov    %eax,0x4(%esp)
    1048:	89 1c 24             	mov    %ebx,(%esp)
    104b:	e8 fc ff ff ff       	call   104c <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x54>
    1050:	85 c0                	test   %eax,%eax
    1052:	0f 84 98 02 00 00    	je     12f0 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x2f8>
		KERROR("Error reading BPB: %u", err);
		return;
	}

	// Get data sector count
	root_dir_sectors = ((bpb.root_entry_count * 32) + (bpb.bytes_per_sector - 1)) / bpb.bytes_per_sector;
    1058:	0f b7 43 29          	movzwl 0x29(%ebx),%eax
    105c:	0f b7 4b 23          	movzwl 0x23(%ebx),%ecx

	num_data_sectors = bpb.total_sectors_32 - (bpb.reserved_sector_count + (bpb.table_count * bpb.table_size_32)) + root_dir_sectors;
    1060:	0f b7 7b 26          	movzwl 0x26(%ebx),%edi
		KERROR("Error reading BPB: %u", err);
		return;
	}

	// Get data sector count
	root_dir_sectors = ((bpb.root_entry_count * 32) + (bpb.bytes_per_sector - 1)) / bpb.bytes_per_sector;
    1064:	c1 e0 05             	shl    $0x5,%eax
    1067:	8d 44 01 ff          	lea    -0x1(%ecx,%eax,1),%eax
    106b:	99                   	cltd   
    106c:	f7 f9                	idiv   %ecx

	num_data_sectors = bpb.total_sectors_32 - (bpb.reserved_sector_count + (bpb.table_count * bpb.table_size_32)) + root_dir_sectors;
    106e:	8b 53 38             	mov    0x38(%ebx),%edx
    1071:	29 fa                	sub    %edi,%edx
    1073:	0f b6 7b 28          	movzbl 0x28(%ebx),%edi
    1077:	0f af 7b 3c          	imul   0x3c(%ebx),%edi
    107b:	29 fa                	sub    %edi,%edx
	num_data_clusters = num_data_sectors / bpb.sectors_per_cluster;
    107d:	0f b6 7b 25          	movzbl 0x25(%ebx),%edi

	// Calculate size of a cluster (in bytes)
	cluster_size = bpb.sectors_per_cluster * bpb.bytes_per_sector;
    1081:	0f af cf             	imul   %edi,%ecx
    1084:	89 8b 84 02 00 00    	mov    %ecx,0x284(%ebx)
		KERROR("Error reading BPB: %u", err);
		return;
	}

	// Get data sector count
	root_dir_sectors = ((bpb.root_entry_count * 32) + (bpb.bytes_per_sector - 1)) / bpb.bytes_per_sector;
    108a:	89 83 74 02 00 00    	mov    %eax,0x274(%ebx)

	num_data_sectors = bpb.total_sectors_32 - (bpb.reserved_sector_count + (bpb.table_count * bpb.table_size_32)) + root_dir_sectors;
    1090:	01 d0                	add    %edx,%eax
	num_data_clusters = num_data_sectors / bpb.sectors_per_cluster;
    1092:	31 d2                	xor    %edx,%edx
	}

	// Get data sector count
	root_dir_sectors = ((bpb.root_entry_count * 32) + (bpb.bytes_per_sector - 1)) / bpb.bytes_per_sector;

	num_data_sectors = bpb.total_sectors_32 - (bpb.reserved_sector_count + (bpb.table_count * bpb.table_size_32)) + root_dir_sectors;
    1094:	89 83 7c 02 00 00    	mov    %eax,0x27c(%ebx)
	num_data_clusters = num_data_sectors / bpb.sectors_per_cluster;
    109a:	f7 f7                	div    %edi
    109c:	89 83 78 02 00 00    	mov    %eax,0x278(%ebx)

	// Calculate size of a cluster (in bytes)
	cluster_size = bpb.sectors_per_cluster * bpb.bytes_per_sector;
	KDEBUG("Cluster size of %u bytes", cluster_size);
    10a2:	b8 08 1a 00 00       	mov    $0x1a08,%eax
    10a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
    10ab:	89 44 24 04          	mov    %eax,0x4(%esp)
    10af:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
    10b6:	e8 fc ff ff ff       	call   10b7 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0xbf>

	// Calculate address of first data sector
	first_data_sector = bpb.reserved_sector_count + (bpb.table_count * bpb.table_size_32) + root_dir_sectors;
    10bb:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
    10bf:	8b 7b 3c             	mov    0x3c(%ebx),%edi
    10c2:	0f b7 53 26          	movzwl 0x26(%ebx),%edx
    10c6:	8b 8b 74 02 00 00    	mov    0x274(%ebx),%ecx
    10cc:	0f af c7             	imul   %edi,%eax
    10cf:	01 ca                	add    %ecx,%edx
    10d1:	01 d0                	add    %edx,%eax
    10d3:	89 83 80 02 00 00    	mov    %eax,0x280(%ebx)

	// Determine volume type
	if(num_data_clusters < 4085) {
    10d9:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
    10df:	3d f4 0f 00 00       	cmp    $0xff4,%eax
    10e4:	0f 86 c6 01 00 00    	jbe    12b0 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x2b8>
		KERROR("Tried to initialise FAT12 volume as FAT32");
		return;
	} else if(num_data_clusters < 65525) { 
    10ea:	3d f4 ff 00 00       	cmp    $0xfff4,%eax
    10ef:	0f 86 fb 00 00 00    	jbe    11f0 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x1f8>
		KERROR("Tried to initialise FAT16 volume as FAT32");
		return;
	}

	// Read FSINFO sector
	if(!this->hal_fs::read_sectors(bpb.fat_info, 1, &fs_info, &err)) {
    10f5:	8d 43 72             	lea    0x72(%ebx),%eax
    10f8:	bf 01 00 00 00       	mov    $0x1,%edi
    10fd:	89 74 24 10          	mov    %esi,0x10(%esp)
    1101:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1105:	89 7c 24 08          	mov    %edi,0x8(%esp)
    1109:	0f b7 43 48          	movzwl 0x48(%ebx),%eax
    110d:	89 1c 24             	mov    %ebx,(%esp)
    1110:	89 44 24 04          	mov    %eax,0x4(%esp)
    1114:	e8 fc ff ff ff       	call   1115 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x11d>
    1119:	85 c0                	test   %eax,%eax
    111b:	0f 84 ff 01 00 00    	je     1320 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x328>
		KERROR("Error reading FSInfo: %u", err);
		return;
	}

	// Verify FSInfo struct
	if(fs_info.signature != 0x41615252 || fs_info.signature2 != 0x61417272 || fs_info.trailSig != 0xAA550000) {
    1121:	8b 43 72             	mov    0x72(%ebx),%eax
    1124:	8b 93 56 02 00 00    	mov    0x256(%ebx),%edx
    112a:	8b 8b 6e 02 00 00    	mov    0x26e(%ebx),%ecx
    1130:	3d 52 52 61 41       	cmp    $0x41615252,%eax
    1135:	75 0c                	jne    1143 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x14b>
    1137:	81 fa 72 72 41 61    	cmp    $0x61417272,%edx
    113d:	0f 84 dd 00 00 00    	je     1220 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x228>
		KWARNING("Corrupted FSInfo: 0x%08X 0x%08X 0x%08X", 
			(unsigned int) fs_info.signature, (unsigned int) fs_info.signature2,
			(unsigned int) fs_info.trailSig);
    1143:	89 4c 24 10          	mov    %ecx,0x10(%esp)
    1147:	b9 b8 1a 00 00       	mov    $0x1ab8,%ecx
    114c:	89 54 24 0c          	mov    %edx,0xc(%esp)
    1150:	89 44 24 08          	mov    %eax,0x8(%esp)
    1154:	89 4c 24 04          	mov    %ecx,0x4(%esp)
    1158:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
    115f:	e8 fc ff ff ff       	call   1160 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x168>
			}
		}
	}

	// Allocate more memory for the filesystem
	fatBuffer = (uint32_t *) kmalloc(cluster_size);
    1164:	8b 83 84 02 00 00    	mov    0x284(%ebx),%eax
    116a:	89 04 24             	mov    %eax,(%esp)
    116d:	e8 fc ff ff ff       	call   116e <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x176>
    1172:	89 83 88 02 00 00    	mov    %eax,0x288(%ebx)
	dirHandleCache = hashmap_allocate();
    1178:	e8 fc ff ff ff       	call   1179 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x181>
    117d:	89 43 14             	mov    %eax,0x14(%ebx)

	// Read FAT sector 0 to get dirty flags
	if(!this->hal_fs::read_sectors(bpb.reserved_sector_count, 1, fatBuffer, &err)) {
    1180:	89 74 24 10          	mov    %esi,0x10(%esp)
    1184:	8b 83 88 02 00 00    	mov    0x288(%ebx),%eax
    118a:	89 44 24 0c          	mov    %eax,0xc(%esp)
    118e:	b8 01 00 00 00       	mov    $0x1,%eax
    1193:	89 44 24 08          	mov    %eax,0x8(%esp)
    1197:	0f b7 43 26          	movzwl 0x26(%ebx),%eax
    119b:	89 1c 24             	mov    %ebx,(%esp)
    119e:	89 44 24 04          	mov    %eax,0x4(%esp)
    11a2:	e8 fc ff ff ff       	call   11a3 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x1ab>
    11a7:	85 c0                	test   %eax,%eax
    11a9:	0f 84 a1 01 00 00    	je     1350 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x358>
		KERROR("Error reading FAT: %u", err);
		return;
	} else {
		fs_clealyUnmounted = (fatBuffer[1] & FAT32_VOLUME_DIRTY_MASK);
    11af:	8b 83 88 02 00 00    	mov    0x288(%ebx),%eax
    11b5:	f6 40 07 08          	testb  $0x8,0x7(%eax)
    11b9:	0f 95 c0             	setne  %al

		if(!fs_clealyUnmounted) {
    11bc:	84 c0                	test   %al,%al
	// Read FAT sector 0 to get dirty flags
	if(!this->hal_fs::read_sectors(bpb.reserved_sector_count, 1, fatBuffer, &err)) {
		KERROR("Error reading FAT: %u", err);
		return;
	} else {
		fs_clealyUnmounted = (fatBuffer[1] & FAT32_VOLUME_DIRTY_MASK);
    11be:	88 43 10             	mov    %al,0x10(%ebx)

		if(!fs_clealyUnmounted) {
    11c1:	0f 84 09 01 00 00    	je     12d0 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x2d8>

			KDEBUG(" Dir: %s", dir->i.name);
		}
	}*/

	KSUCCESS("Volume initialised.");
    11c7:	be 65 19 00 00       	mov    $0x1965,%esi
			KWARNING("Filesystem not cleanly unmounted after last use!");
		}
	}

	// Read root directory
	this->read_root_dir();
    11cc:	89 1c 24             	mov    %ebx,(%esp)
    11cf:	e8 fc ff ff ff       	call   11d0 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x1d8>

			KDEBUG(" Dir: %s", dir->i.name);
		}
	}*/

	KSUCCESS("Volume initialised.");
    11d4:	89 74 24 04          	mov    %esi,0x4(%esp)
    11d8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
    11df:	e8 fc ff ff ff       	call   11e0 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x1e8>
    11e4:	eb 1f                	jmp    1205 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x20d>
    11e6:	8d 76 00             	lea    0x0(%esi),%esi
    11e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
	// Determine volume type
	if(num_data_clusters < 4085) {
		KERROR("Tried to initialise FAT12 volume as FAT32");
		return;
	} else if(num_data_clusters < 65525) { 
		KERROR("Tried to initialise FAT16 volume as FAT32");
    11f0:	b8 60 1a 00 00       	mov    $0x1a60,%eax
    11f5:	89 44 24 04          	mov    %eax,0x4(%esp)
    11f9:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    1200:	e8 fc ff ff ff       	call   1201 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x209>
			KDEBUG(" Dir: %s", dir->i.name);
		}
	}*/

	KSUCCESS("Volume initialised.");
}
    1205:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    1208:	33 05 00 00 00 00    	xor    0x0,%eax
    120e:	0f 85 5d 01 00 00    	jne    1371 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x379>
    1214:	83 c4 3c             	add    $0x3c,%esp
    1217:	5b                   	pop    %ebx
    1218:	5e                   	pop    %esi
    1219:	5f                   	pop    %edi
    121a:	5d                   	pop    %ebp
    121b:	c3                   	ret    
    121c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		KERROR("Error reading FSInfo: %u", err);
		return;
	}

	// Verify FSInfo struct
	if(fs_info.signature != 0x41615252 || fs_info.signature2 != 0x61417272 || fs_info.trailSig != 0xAA550000) {
    1220:	81 f9 00 00 55 aa    	cmp    $0xaa550000,%ecx
    1226:	0f 85 17 ff ff ff    	jne    1143 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x14b>
			(unsigned int) fs_info.trailSig);
	} else {
		KDEBUG("%u clusters, %u free, start search at %u",
			(unsigned int) num_data_clusters,
			(unsigned int) fs_info.last_known_free_sec_cnt,
			(unsigned int) fs_info.free_cluster_search_start);
    122c:	8b 83 5e 02 00 00    	mov    0x25e(%ebx),%eax
    1232:	89 44 24 10          	mov    %eax,0x10(%esp)
    1236:	8b 83 5a 02 00 00    	mov    0x25a(%ebx),%eax
    123c:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1240:	8b 83 78 02 00 00    	mov    0x278(%ebx),%eax
    1246:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
    124d:	89 44 24 08          	mov    %eax,0x8(%esp)
    1251:	b8 e8 1a 00 00       	mov    $0x1ae8,%eax
    1256:	89 44 24 04          	mov    %eax,0x4(%esp)
    125a:	e8 fc ff ff ff       	call   125b <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x263>

		// Set up pointer to legacy volume label
		volumeLabel = (char *) kmalloc(16);
    125f:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
    1266:	e8 fc ff ff ff       	call   1267 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x26f>
		memcpy(volumeLabel, &bpb.volume_label, 11);
    126b:	ba 0b 00 00 00       	mov    $0xb,%edx
			(unsigned int) num_data_clusters,
			(unsigned int) fs_info.last_known_free_sec_cnt,
			(unsigned int) fs_info.free_cluster_search_start);

		// Set up pointer to legacy volume label
		volumeLabel = (char *) kmalloc(16);
    1270:	89 43 0c             	mov    %eax,0xc(%ebx)
		memcpy(volumeLabel, &bpb.volume_label, 11);
    1273:	89 54 24 08          	mov    %edx,0x8(%esp)
    1277:	8d 53 5f             	lea    0x5f(%ebx),%edx
    127a:	89 54 24 04          	mov    %edx,0x4(%esp)
    127e:	89 04 24             	mov    %eax,(%esp)
    1281:	e8 fc ff ff ff       	call   1282 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x28a>

		// Trim spaces at the end
		for(unsigned int i = 10; i > 0; i--) {
    1286:	b8 0a 00 00 00       	mov    $0xa,%eax
    128b:	90                   	nop
    128c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
			if(volumeLabel[i] == ' ') {
    1290:	8b 53 0c             	mov    0xc(%ebx),%edx
    1293:	01 c2                	add    %eax,%edx
    1295:	80 3a 20             	cmpb   $0x20,(%edx)
    1298:	0f 85 c6 fe ff ff    	jne    1164 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x16c>
		// Set up pointer to legacy volume label
		volumeLabel = (char *) kmalloc(16);
		memcpy(volumeLabel, &bpb.volume_label, 11);

		// Trim spaces at the end
		for(unsigned int i = 10; i > 0; i--) {
    129e:	48                   	dec    %eax
			if(volumeLabel[i] == ' ') {
				volumeLabel[i] = 0x00;
    129f:	c6 02 00             	movb   $0x0,(%edx)
		// Set up pointer to legacy volume label
		volumeLabel = (char *) kmalloc(16);
		memcpy(volumeLabel, &bpb.volume_label, 11);

		// Trim spaces at the end
		for(unsigned int i = 10; i > 0; i--) {
    12a2:	75 ec                	jne    1290 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x298>
    12a4:	e9 bb fe ff ff       	jmp    1164 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x16c>
    12a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	// Calculate address of first data sector
	first_data_sector = bpb.reserved_sector_count + (bpb.table_count * bpb.table_size_32) + root_dir_sectors;

	// Determine volume type
	if(num_data_clusters < 4085) {
		KERROR("Tried to initialise FAT12 volume as FAT32");
    12b0:	b8 2c 1a 00 00       	mov    $0x1a2c,%eax
    12b5:	89 44 24 04          	mov    %eax,0x4(%esp)
    12b9:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    12c0:	e8 fc ff ff ff       	call   12c1 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x2c9>
		return;
    12c5:	e9 3b ff ff ff       	jmp    1205 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x20d>
    12ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		return;
	} else {
		fs_clealyUnmounted = (fatBuffer[1] & FAT32_VOLUME_DIRTY_MASK);

		if(!fs_clealyUnmounted) {
			KWARNING("Filesystem not cleanly unmounted after last use!");
    12d0:	bf 1c 1b 00 00       	mov    $0x1b1c,%edi
    12d5:	89 7c 24 04          	mov    %edi,0x4(%esp)
    12d9:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
    12e0:	e8 fc ff ff ff       	call   12e1 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x2e9>
    12e5:	e9 dd fe ff ff       	jmp    11c7 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x1cf>
    12ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
fs_fat32::fs_fat32(hal_disk_partition_t *p, hal_disk_t *d) : hal_fs::hal_fs(p, d) {
	unsigned int err = 0;

	// Read sector 0 of partition synchronously
	if(!this->hal_fs::read_sectors(0, 1, &bpb, &err)) {
		KERROR("Error reading BPB: %u", err);
    12f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
    12f3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    12fa:	89 44 24 08          	mov    %eax,0x8(%esp)
    12fe:	b8 29 19 00 00       	mov    $0x1929,%eax
    1303:	89 44 24 04          	mov    %eax,0x4(%esp)
    1307:	e8 fc ff ff ff       	call   1308 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x310>
		return;
    130c:	e9 f4 fe ff ff       	jmp    1205 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x20d>
    1311:	eb 0d                	jmp    1320 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x328>
    1313:	90                   	nop
    1314:	90                   	nop
    1315:	90                   	nop
    1316:	90                   	nop
    1317:	90                   	nop
    1318:	90                   	nop
    1319:	90                   	nop
    131a:	90                   	nop
    131b:	90                   	nop
    131c:	90                   	nop
    131d:	90                   	nop
    131e:	90                   	nop
    131f:	90                   	nop
		return;
	}

	// Read FSINFO sector
	if(!this->hal_fs::read_sectors(bpb.fat_info, 1, &fs_info, &err)) {
		KERROR("Error reading FSInfo: %u", err);
    1320:	8b 45 e0             	mov    -0x20(%ebp),%eax
    1323:	bb 94 1a 00 00       	mov    $0x1a94,%ebx
    1328:	89 5c 24 04          	mov    %ebx,0x4(%esp)
    132c:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    1333:	89 44 24 08          	mov    %eax,0x8(%esp)
    1337:	e8 fc ff ff ff       	call   1338 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x340>
		return;
    133c:	e9 c4 fe ff ff       	jmp    1205 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x20d>
    1341:	eb 0d                	jmp    1350 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x358>
    1343:	90                   	nop
    1344:	90                   	nop
    1345:	90                   	nop
    1346:	90                   	nop
    1347:	90                   	nop
    1348:	90                   	nop
    1349:	90                   	nop
    134a:	90                   	nop
    134b:	90                   	nop
    134c:	90                   	nop
    134d:	90                   	nop
    134e:	90                   	nop
    134f:	90                   	nop
	fatBuffer = (uint32_t *) kmalloc(cluster_size);
	dirHandleCache = hashmap_allocate();

	// Read FAT sector 0 to get dirty flags
	if(!this->hal_fs::read_sectors(bpb.reserved_sector_count, 1, fatBuffer, &err)) {
		KERROR("Error reading FAT: %u", err);
    1350:	8b 45 e0             	mov    -0x20(%ebp),%eax
    1353:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    135a:	89 44 24 08          	mov    %eax,0x8(%esp)
    135e:	b8 47 19 00 00       	mov    $0x1947,%eax
    1363:	89 44 24 04          	mov    %eax,0x4(%esp)
    1367:	e8 fc ff ff ff       	call   1368 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x370>
		return;
    136c:	e9 94 fe ff ff       	jmp    1205 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x20d>
			KDEBUG(" Dir: %s", dir->i.name);
		}
	}*/

	KSUCCESS("Volume initialised.");
}
    1371:	e8 fc ff ff ff       	call   1372 <_ZN8fs_fat32C1EP18hal_disk_partitionP8hal_disk+0x37a>
    1376:	66 90                	xchg   %ax,%ax

00001378 <_ZN8fs_fat3215sector_for_fileEPcj>:
}

/*
 * Gets the sector, relative to the start of the partition, for a certain file.
 */
unsigned int fs_fat32::sector_for_file(char *path, unsigned int offset) {
    1378:	55                   	push   %ebp
    1379:	89 e5                	mov    %esp,%ebp
    137b:	83 ec 18             	sub    $0x18,%esp
    137e:	a1 00 00 00 00       	mov    0x0,%eax
    1383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    1386:	31 c0                	xor    %eax,%eax
	return 0;
    1388:	8b 55 f4             	mov    -0xc(%ebp),%edx
    138b:	33 15 00 00 00 00    	xor    0x0,%edx
    1391:	75 02                	jne    1395 <_ZN8fs_fat3215sector_for_fileEPcj+0x1d>
    1393:	c9                   	leave  
    1394:	c3                   	ret    
    1395:	e8 fc ff ff ff       	call   1396 <_ZN8fs_fat3215sector_for_fileEPcj+0x1e>
    139a:	00 00                	add    %al,(%eax)
    139c:	00 00                	add    %al,(%eax)
	...

000013a0 <_ZL17fat32_part_verifyP18hal_disk_partition>:
}

/*
 * Verifies if the FAT32 driver can support the partition.
 */
static bool fat32_part_verify(hal_disk_partition_t *part) {
    13a0:	55                   	push   %ebp
    13a1:	89 e5                	mov    %esp,%ebp
    13a3:	83 ec 18             	sub    $0x18,%esp
    13a6:	a1 00 00 00 00       	mov    0x0,%eax
    13ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    13ae:	31 c0                	xor    %eax,%eax
    13b0:	8b 45 08             	mov    0x8(%ebp),%eax
    13b3:	80 38 0c             	cmpb   $0xc,(%eax)
    13b6:	0f 94 c0             	sete   %al
	if(part->type == 0x0C) {
		return true;
	}

	return false;
}
    13b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
    13bc:	33 15 00 00 00 00    	xor    0x0,%edx
    13c2:	75 02                	jne    13c6 <_ZL17fat32_part_verifyP18hal_disk_partition+0x26>
    13c4:	c9                   	leave  
    13c5:	c3                   	ret    
    13c6:	e8 fc ff ff ff       	call   13c7 <_ZL17fat32_part_verifyP18hal_disk_partition+0x27>
    13cb:	90                   	nop

000013cc <_ZL16fat32_file_writePvS_jjP7fs_file>:
	UNIMPLEMENTED_WARNING();
	return NULL;
}

// Writes to the specified offset in the file.
static void fat32_file_write(void *superblock, void* buffer, unsigned int offset, unsigned int bytes, fs_file_t *file) {
    13cc:	55                   	push   %ebp
    13cd:	89 e5                	mov    %esp,%ebp
    13cf:	83 ec 18             	sub    $0x18,%esp
    13d2:	a1 00 00 00 00       	mov    0x0,%eax
    13d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    13da:	31 c0                	xor    %eax,%eax
	UNIMPLEMENTED_WARNING();
    13dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    13df:	33 05 00 00 00 00    	xor    0x0,%eax
    13e5:	75 1b                	jne    1402 <_ZL16fat32_file_writePvS_jjP7fs_file+0x36>
    13e7:	c7 45 10 40 17 00 00 	movl   $0x1740,0x10(%ebp)
    13ee:	c7 45 0c 55 1b 00 00 	movl   $0x1b55,0xc(%ebp)
    13f5:	c7 45 08 04 00 00 00 	movl   $0x4,0x8(%ebp)
    13fc:	c9                   	leave  
	return NULL;
}

// Writes to the specified offset in the file.
static void fat32_file_write(void *superblock, void* buffer, unsigned int offset, unsigned int bytes, fs_file_t *file) {
	UNIMPLEMENTED_WARNING();
    13fd:	e9 fc ff ff ff       	jmp    13fe <_ZL16fat32_file_writePvS_jjP7fs_file+0x32>
    1402:	e8 fc ff ff ff       	call   1403 <_ZL16fat32_file_writePvS_jjP7fs_file+0x37>
    1407:	90                   	nop

00001408 <_ZL15fat32_file_readPvS_jjP7fs_file>:
static void fat32_file_update(void *superblock, fs_file_t *file) {
	UNIMPLEMENTED_WARNING();
}

// Reads from the specified offset in the file.
static void* fat32_file_read(void *superblock, void* buffer, unsigned int offset, unsigned int bytes, fs_file_t *file) {
    1408:	55                   	push   %ebp
	UNIMPLEMENTED_WARNING();
    1409:	ba 55 1b 00 00       	mov    $0x1b55,%edx
static void fat32_file_update(void *superblock, fs_file_t *file) {
	UNIMPLEMENTED_WARNING();
}

// Reads from the specified offset in the file.
static void* fat32_file_read(void *superblock, void* buffer, unsigned int offset, unsigned int bytes, fs_file_t *file) {
    140e:	89 e5                	mov    %esp,%ebp
    1410:	83 ec 28             	sub    $0x28,%esp
    1413:	a1 00 00 00 00       	mov    0x0,%eax
    1418:	89 45 f4             	mov    %eax,-0xc(%ebp)
    141b:	31 c0                	xor    %eax,%eax
	UNIMPLEMENTED_WARNING();
    141d:	b8 a0 17 00 00       	mov    $0x17a0,%eax
    1422:	89 54 24 04          	mov    %edx,0x4(%esp)
    1426:	89 44 24 08          	mov    %eax,0x8(%esp)
    142a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    1431:	e8 fc ff ff ff       	call   1432 <_ZL15fat32_file_readPvS_jjP7fs_file+0x2a>
	return NULL;
}
    1436:	31 c0                	xor    %eax,%eax
    1438:	8b 55 f4             	mov    -0xc(%ebp),%edx
    143b:	33 15 00 00 00 00    	xor    0x0,%edx
    1441:	75 02                	jne    1445 <_ZL15fat32_file_readPvS_jjP7fs_file+0x3d>
    1443:	c9                   	leave  
    1444:	c3                   	ret    
    1445:	e8 fc ff ff ff       	call   1446 <_ZL15fat32_file_readPvS_jjP7fs_file+0x3e>
    144a:	66 90                	xchg   %ax,%ax

0000144c <_ZL17fat32_file_updatePvP7fs_file>:
static void fat32_file_close(void *superblock, fs_file_t *file) {
	UNIMPLEMENTED_WARNING();
}

// Updates file metadata from struct
static void fat32_file_update(void *superblock, fs_file_t *file) {
    144c:	55                   	push   %ebp
	UNIMPLEMENTED_WARNING();
    144d:	b9 00 18 00 00       	mov    $0x1800,%ecx
static void fat32_file_close(void *superblock, fs_file_t *file) {
	UNIMPLEMENTED_WARNING();
}

// Updates file metadata from struct
static void fat32_file_update(void *superblock, fs_file_t *file) {
    1452:	89 e5                	mov    %esp,%ebp
    1454:	83 ec 28             	sub    $0x28,%esp
    1457:	a1 00 00 00 00       	mov    0x0,%eax
    145c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    145f:	31 c0                	xor    %eax,%eax
	UNIMPLEMENTED_WARNING();
    1461:	b8 55 1b 00 00       	mov    $0x1b55,%eax
    1466:	89 4c 24 08          	mov    %ecx,0x8(%esp)
    146a:	89 44 24 04          	mov    %eax,0x4(%esp)
    146e:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    1475:	e8 fc ff ff ff       	call   1476 <_ZL17fat32_file_updatePvP7fs_file+0x2a>
}
    147a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    147d:	33 05 00 00 00 00    	xor    0x0,%eax
    1483:	75 02                	jne    1487 <_ZL17fat32_file_updatePvP7fs_file+0x3b>
    1485:	c9                   	leave  
    1486:	c3                   	ret    
    1487:	e8 fc ff ff ff       	call   1488 <_ZL17fat32_file_updatePvP7fs_file+0x3c>

0000148c <_ZL16fat32_file_closePvP7fs_file>:
	UNIMPLEMENTED_WARNING();
	return NULL;
}

// Closes a file handle
static void fat32_file_close(void *superblock, fs_file_t *file) {
    148c:	55                   	push   %ebp
    148d:	89 e5                	mov    %esp,%ebp
    148f:	83 ec 28             	sub    $0x28,%esp
    1492:	a1 00 00 00 00       	mov    0x0,%eax
    1497:	89 45 f4             	mov    %eax,-0xc(%ebp)
    149a:	31 c0                	xor    %eax,%eax
	UNIMPLEMENTED_WARNING();
    149c:	b8 40 18 00 00       	mov    $0x1840,%eax
    14a1:	89 44 24 08          	mov    %eax,0x8(%esp)
    14a5:	b8 55 1b 00 00       	mov    $0x1b55,%eax
    14aa:	89 44 24 04          	mov    %eax,0x4(%esp)
    14ae:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    14b5:	e8 fc ff ff ff       	call   14b6 <_ZL16fat32_file_closePvP7fs_file+0x2a>
}
    14ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
    14bd:	33 05 00 00 00 00    	xor    0x0,%eax
    14c3:	75 02                	jne    14c7 <_ZL16fat32_file_closePvP7fs_file+0x3b>
    14c5:	c9                   	leave  
    14c6:	c3                   	ret    
    14c7:	e8 fc ff ff ff       	call   14c8 <_ZL16fat32_file_closePvP7fs_file+0x3c>

000014cc <_ZL15fat32_file_openPvPc19fs_file_open_mode_t>:
	UNIMPLEMENTED_WARNING();
	return -1;
}

// Opens a file, optionally creating it.
static fs_file_t *fat32_file_open(void *superblock, char *path, fs_file_open_mode_t mode) {
    14cc:	55                   	push   %ebp
    14cd:	89 e5                	mov    %esp,%ebp
    14cf:	83 ec 28             	sub    $0x28,%esp
    14d2:	a1 00 00 00 00       	mov    0x0,%eax
    14d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    14da:	31 c0                	xor    %eax,%eax
	UNIMPLEMENTED_WARNING();
    14dc:	b8 80 18 00 00       	mov    $0x1880,%eax
    14e1:	89 44 24 08          	mov    %eax,0x8(%esp)
    14e5:	b8 55 1b 00 00       	mov    $0x1b55,%eax
    14ea:	89 44 24 04          	mov    %eax,0x4(%esp)
    14ee:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    14f5:	e8 fc ff ff ff       	call   14f6 <_ZL15fat32_file_openPvPc19fs_file_open_mode_t+0x2a>
	return NULL;
}
    14fa:	31 c0                	xor    %eax,%eax
    14fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
    14ff:	33 15 00 00 00 00    	xor    0x0,%edx
    1505:	75 02                	jne    1509 <_ZL15fat32_file_openPvPc19fs_file_open_mode_t+0x3d>
    1507:	c9                   	leave  
    1508:	c3                   	ret    
    1509:	e8 fc ff ff ff       	call   150a <_ZL15fat32_file_openPvPc19fs_file_open_mode_t+0x3e>
    150e:	66 90                	xchg   %ax,%ax

00001510 <_ZL12fat32_unlinkPvPc>:
	UNIMPLEMENTED_WARNING();
	return -1;
}

// Deletes an item
static int fat32_unlink(void *superblock, char *path) {
    1510:	55                   	push   %ebp
	UNIMPLEMENTED_WARNING();
    1511:	ba 55 1b 00 00       	mov    $0x1b55,%edx
	UNIMPLEMENTED_WARNING();
	return -1;
}

// Deletes an item
static int fat32_unlink(void *superblock, char *path) {
    1516:	89 e5                	mov    %esp,%ebp
    1518:	83 ec 28             	sub    $0x28,%esp
    151b:	a1 00 00 00 00       	mov    0x0,%eax
    1520:	89 45 f4             	mov    %eax,-0xc(%ebp)
    1523:	31 c0                	xor    %eax,%eax
	UNIMPLEMENTED_WARNING();
    1525:	b8 c0 18 00 00       	mov    $0x18c0,%eax
    152a:	89 54 24 04          	mov    %edx,0x4(%esp)
    152e:	89 44 24 08          	mov    %eax,0x8(%esp)
    1532:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    1539:	e8 fc ff ff ff       	call   153a <_ZL12fat32_unlinkPvPc+0x2a>
	return -1;
}
    153e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1543:	8b 55 f4             	mov    -0xc(%ebp),%edx
    1546:	33 15 00 00 00 00    	xor    0x0,%edx
    154c:	75 02                	jne    1550 <_ZL12fat32_unlinkPvPc+0x40>
    154e:	c9                   	leave  
    154f:	c3                   	ret    
    1550:	e8 fc ff ff ff       	call   1551 <_ZL12fat32_unlinkPvPc+0x41>
    1555:	8d 76 00             	lea    0x0(%esi),%esi

00001558 <_ZL22fat32_create_directoryPvPc>:

	return fs->list_directory(dirname, true);
}

// Create a directory
static int fat32_create_directory(void *superblock, char *path) {
    1558:	55                   	push   %ebp
	UNIMPLEMENTED_WARNING();
    1559:	b9 e0 18 00 00       	mov    $0x18e0,%ecx

	return fs->list_directory(dirname, true);
}

// Create a directory
static int fat32_create_directory(void *superblock, char *path) {
    155e:	89 e5                	mov    %esp,%ebp
    1560:	83 ec 28             	sub    $0x28,%esp
    1563:	a1 00 00 00 00       	mov    0x0,%eax
    1568:	89 45 f4             	mov    %eax,-0xc(%ebp)
    156b:	31 c0                	xor    %eax,%eax
	UNIMPLEMENTED_WARNING();
    156d:	b8 55 1b 00 00       	mov    $0x1b55,%eax
    1572:	89 4c 24 08          	mov    %ecx,0x8(%esp)
    1576:	89 44 24 04          	mov    %eax,0x4(%esp)
    157a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
    1581:	e8 fc ff ff ff       	call   1582 <_ZL22fat32_create_directoryPvPc+0x2a>
	return -1;
}
    1586:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    158b:	8b 55 f4             	mov    -0xc(%ebp),%edx
    158e:	33 15 00 00 00 00    	xor    0x0,%edx
    1594:	75 02                	jne    1598 <_ZL22fat32_create_directoryPvPc+0x40>
    1596:	c9                   	leave  
    1597:	c3                   	ret    
    1598:	e8 fc ff ff ff       	call   1599 <_ZL22fat32_create_directoryPvPc+0x41>
    159d:	8d 76 00             	lea    0x0(%esi),%esi

000015a0 <_ZL20fat32_list_directoryPvPc>:

	return NULL;
}

// List a directory.
static fs_directory_t *fat32_list_directory(void *superblock, char *dirname) {
    15a0:	55                   	push   %ebp
    15a1:	89 e5                	mov    %esp,%ebp
    15a3:	83 ec 28             	sub    $0x28,%esp
    15a6:	a1 00 00 00 00       	mov    0x0,%eax
    15ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    15ae:	31 c0                	xor    %eax,%eax
	fs_fat32 *fs = (fs_fat32 *) superblock;

	return fs->list_directory(dirname, true);
    15b0:	b8 01 00 00 00       	mov    $0x1,%eax
    15b5:	89 44 24 08          	mov    %eax,0x8(%esp)
    15b9:	8b 45 0c             	mov    0xc(%ebp),%eax
    15bc:	89 44 24 04          	mov    %eax,0x4(%esp)
    15c0:	8b 45 08             	mov    0x8(%ebp),%eax
    15c3:	89 04 24             	mov    %eax,(%esp)
    15c6:	e8 fc ff ff ff       	call   15c7 <_ZL20fat32_list_directoryPvPc+0x27>
}
    15cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
    15ce:	33 15 00 00 00 00    	xor    0x0,%edx
    15d4:	75 02                	jne    15d8 <_ZL20fat32_list_directoryPvPc+0x38>
    15d6:	c9                   	leave  
    15d7:	c3                   	ret    
    15d8:	e8 fc ff ff ff       	call   15d9 <_ZL20fat32_list_directoryPvPc+0x39>
    15dd:	8d 76 00             	lea    0x0(%esi),%esi

000015e0 <_ZL23fat32_create_superblockP18hal_disk_partitionP8hal_disk>:
 * Creates a superblock (in this case, the fat32/fat16 classes) for the
 * appropriate partition.
 *
 * This code assumes it's only called if it's a FAT fs, which is usually true.
 */
static void *fat32_create_superblock(hal_disk_partition_t *part, hal_disk_t *disk) {
    15e0:	55                   	push   %ebp
    15e1:	89 e5                	mov    %esp,%ebp
    15e3:	83 ec 38             	sub    $0x38,%esp
    15e6:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    15e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
    15ec:	89 75 fc             	mov    %esi,-0x4(%ebp)
    15ef:	8b 75 0c             	mov    0xc(%ebp),%esi
    15f2:	a1 00 00 00 00       	mov    0x0,%eax
    15f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    15fa:	31 c0                	xor    %eax,%eax
	// FAT32
	if(part->type == 0x0C) {
    15fc:	80 3b 0c             	cmpb   $0xc,(%ebx)
    15ff:	75 22                	jne    1623 <_ZL23fat32_create_superblockP18hal_disk_partitionP8hal_disk+0x43>
		fs_fat32 *fs = new fs_fat32(part, disk);
    1601:	c7 04 24 8c 02 00 00 	movl   $0x28c,(%esp)
    1608:	e8 fc ff ff ff       	call   1609 <_ZL23fat32_create_superblockP18hal_disk_partitionP8hal_disk+0x29>
    160d:	89 74 24 08          	mov    %esi,0x8(%esp)
    1611:	89 5c 24 04          	mov    %ebx,0x4(%esp)
    1615:	89 04 24             	mov    %eax,(%esp)
    1618:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    161b:	e8 fc ff ff ff       	call   161c <_ZL23fat32_create_superblockP18hal_disk_partitionP8hal_disk+0x3c>
    1620:	8b 45 e4             	mov    -0x1c(%ebp),%eax

		return (void *) fs;
	}

	return NULL;
}
    1623:	8b 55 f4             	mov    -0xc(%ebp),%edx
    1626:	33 15 00 00 00 00    	xor    0x0,%edx
    162c:	75 0a                	jne    1638 <_ZL23fat32_create_superblockP18hal_disk_partitionP8hal_disk+0x58>
    162e:	8b 5d f8             	mov    -0x8(%ebp),%ebx
    1631:	8b 75 fc             	mov    -0x4(%ebp),%esi
    1634:	89 ec                	mov    %ebp,%esp
    1636:	5d                   	pop    %ebp
    1637:	c3                   	ret    
    1638:	e8 fc ff ff ff       	call   1639 <_ZL23fat32_create_superblockP18hal_disk_partitionP8hal_disk+0x59>
    163d:	8d 76 00             	lea    0x0(%esi),%esi

00001640 <start>:

/*
 * Initialisation function for the FAT32 driver (called by kernel)
 */
extern "C" {
	module_t *start(void) {
    1640:	55                   	push   %ebp
    1641:	89 e5                	mov    %esp,%ebp
    1643:	83 ec 28             	sub    $0x28,%esp
    1646:	a1 00 00 00 00       	mov    0x0,%eax
    164b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    164e:	31 c0                	xor    %eax,%eax
		hal_vfs_register((hal_vfs_t *) &vfs);
    1650:	c7 04 24 80 16 00 00 	movl   $0x1680,(%esp)
    1657:	e8 fc ff ff ff       	call   1658 <start+0x18>

		return (module_t *) &mod;
	}
    165c:	b8 e0 16 00 00       	mov    $0x16e0,%eax
    1661:	8b 55 f4             	mov    -0xc(%ebp),%edx
    1664:	33 15 00 00 00 00    	xor    0x0,%edx
    166a:	75 02                	jne    166e <start+0x2e>
    166c:	c9                   	leave  
    166d:	c3                   	ret    
    166e:	e8 fc ff ff ff       	call   166f <start+0x2f>
	...

00001680 <_ZL3vfs>:
    1680:	46 41 54 33 32 00 00 00 00 00 00 00 00 00 00 00     FAT32...........
	...
    16a0:	a0 13 00 00 e0 15 00 00 a0 15 00 00 58 15 00 00     ............X...
    16b0:	10 15 00 00 cc 14 00 00 8c 14 00 00 4c 14 00 00     ............L...
    16c0:	08 14 00 00 cc 13 00 00 00 00 00 00 00 00 00 00     ................
	...

000016e0 <_ZL3mod>:
    16e0:	66 73 5f 66 61 74 00 00 00 00 00 00 00 00 00 00     fs_fat..........
	...

00001740 <_ZZL16fat32_file_writePvS_jjP7fs_fileE19__PRETTY_FUNCTION__>:
    1740:	76 6f 69 64 20 66 61 74 33 32 5f 66 69 6c 65 5f     void fat32_file_
    1750:	77 72 69 74 65 28 76 6f 69 64 2a 2c 20 76 6f 69     write(void*, voi
    1760:	64 2a 2c 20 75 6e 73 69 67 6e 65 64 20 69 6e 74     d*, unsigned int
    1770:	2c 20 75 6e 73 69 67 6e 65 64 20 69 6e 74 2c 20     , unsigned int, 
    1780:	66 73 5f 66 69 6c 65 5f 74 2a 29 00 00 00 00 00     fs_file_t*).....
	...

000017a0 <_ZZL15fat32_file_readPvS_jjP7fs_fileE19__PRETTY_FUNCTION__>:
    17a0:	76 6f 69 64 2a 20 66 61 74 33 32 5f 66 69 6c 65     void* fat32_file
    17b0:	5f 72 65 61 64 28 76 6f 69 64 2a 2c 20 76 6f 69     _read(void*, voi
    17c0:	64 2a 2c 20 75 6e 73 69 67 6e 65 64 20 69 6e 74     d*, unsigned int
    17d0:	2c 20 75 6e 73 69 67 6e 65 64 20 69 6e 74 2c 20     , unsigned int, 
    17e0:	66 73 5f 66 69 6c 65 5f 74 2a 29 00 00 00 00 00     fs_file_t*).....
	...

00001800 <_ZZL17fat32_file_updatePvP7fs_fileE19__PRETTY_FUNCTION__>:
    1800:	76 6f 69 64 20 66 61 74 33 32 5f 66 69 6c 65 5f     void fat32_file_
    1810:	75 70 64 61 74 65 28 76 6f 69 64 2a 2c 20 66 73     update(void*, fs
    1820:	5f 66 69 6c 65 5f 74 2a 29 00 00 00 00 00 00 00     _file_t*).......
	...

00001840 <_ZZL16fat32_file_closePvP7fs_fileE19__PRETTY_FUNCTION__>:
    1840:	76 6f 69 64 20 66 61 74 33 32 5f 66 69 6c 65 5f     void fat32_file_
    1850:	63 6c 6f 73 65 28 76 6f 69 64 2a 2c 20 66 73 5f     close(void*, fs_
    1860:	66 69 6c 65 5f 74 2a 29 00 00 00 00 00 00 00 00     file_t*)........
	...

00001880 <_ZZL15fat32_file_openPvPc19fs_file_open_mode_tE19__PRETTY_FUNCTION__>:
    1880:	66 73 5f 66 69 6c 65 5f 74 2a 20 66 61 74 33 32     fs_file_t* fat32
    1890:	5f 66 69 6c 65 5f 6f 70 65 6e 28 76 6f 69 64 2a     _file_open(void*
    18a0:	2c 20 63 68 61 72 2a 2c 20 66 73 5f 66 69 6c 65     , char*, fs_file
    18b0:	5f 6f 70 65 6e 5f 6d 6f 64 65 5f 74 29 00 00 00     _open_mode_t)...

000018c0 <_ZZL12fat32_unlinkPvPcE19__PRETTY_FUNCTION__>:
    18c0:	69 6e 74 20 66 61 74 33 32 5f 75 6e 6c 69 6e 6b     int fat32_unlink
    18d0:	28 76 6f 69 64 2a 2c 20 63 68 61 72 2a 29 00 00     (void*, char*)..

000018e0 <_ZZL22fat32_create_directoryPvPcE19__PRETTY_FUNCTION__>:
    18e0:	69 6e 74 20 66 61 74 33 32 5f 63 72 65 61 74 65     int fat32_create
    18f0:	5f 64 69 72 65 63 74 6f 72 79 28 76 6f 69 64 2a     _directory(void*
    1900:	2c 20 63 68 61 72 2a 29 00 2e 00 2e 2e 00 72 6f     , char*)......ro
    1910:	6f 74 00 66 61 74 33 32 2e 63 70 70 00 65 6e 74     ot.fat32.cpp.ent
    1920:	72 69 65 73 00 64 69 72 00 66 73 5f 66 61 74 3a     ries.dir.fs_fat:
    1930:	20 45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 42      Error reading B
    1940:	50 42 3a 20 25 75 00 66 73 5f 66 61 74 3a 20 45     PB: %u.fs_fat: E
    1950:	72 72 6f 72 20 72 65 61 64 69 6e 67 20 46 41 54     rror reading FAT
    1960:	3a 20 25 75 00 66 73 5f 66 61 74 3a 20 56 6f 6c     : %u.fs_fat: Vol
    1970:	75 6d 65 20 69 6e 69 74 69 61 6c 69 73 65 64 2e     ume initialised.
    1980:	00 00 00 00 66 73 5f 66 61 74 3a 20 43 6f 75 6c     ....fs_fat: Coul
    1990:	64 6e 27 74 20 72 65 61 64 20 73 65 63 74 6f 72     dn't read sector
    19a0:	20 25 75 20 66 6f 72 20 46 41 54 00 66 73 5f 66      %u for FAT.fs_f
    19b0:	61 74 3a 20 45 72 72 6f 72 20 72 65 61 64 69 6e     at: Error readin
    19c0:	67 20 64 69 72 65 63 74 6f 72 79 20 66 69 6c 65     g directory file
    19d0:	20 25 75 3a 20 25 75 00 66 73 5f 66 61 74 3a 20      %u: %u.fs_fat: 
    19e0:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 72 6f     Error reading ro
    19f0:	6f 74 20 64 69 72 20 63 6c 75 73 74 65 72 20 25     ot dir cluster %
    1a00:	75 3a 20 25 75 00 00 00 66 73 5f 66 61 74 3a 20     u: %u...fs_fat: 
    1a10:	43 6c 75 73 74 65 72 20 73 69 7a 65 20 6f 66 20     Cluster size of 
    1a20:	25 75 20 62 79 74 65 73 00 00 00 00 66 73 5f 66     %u bytes....fs_f
    1a30:	61 74 3a 20 54 72 69 65 64 20 74 6f 20 69 6e 69     at: Tried to ini
    1a40:	74 69 61 6c 69 73 65 20 46 41 54 31 32 20 76 6f     tialise FAT12 vo
    1a50:	6c 75 6d 65 20 61 73 20 46 41 54 33 32 00 00 00     lume as FAT32...
    1a60:	66 73 5f 66 61 74 3a 20 54 72 69 65 64 20 74 6f     fs_fat: Tried to
    1a70:	20 69 6e 69 74 69 61 6c 69 73 65 20 46 41 54 31      initialise FAT1
    1a80:	36 20 76 6f 6c 75 6d 65 20 61 73 20 46 41 54 33     6 volume as FAT3
    1a90:	32 00 00 00 66 73 5f 66 61 74 3a 20 45 72 72 6f     2...fs_fat: Erro
    1aa0:	72 20 72 65 61 64 69 6e 67 20 46 53 49 6e 66 6f     r reading FSInfo
    1ab0:	3a 20 25 75 00 00 00 00 66 73 5f 66 61 74 3a 20     : %u....fs_fat: 
    1ac0:	43 6f 72 72 75 70 74 65 64 20 46 53 49 6e 66 6f     Corrupted FSInfo
    1ad0:	3a 20 30 78 25 30 38 58 20 30 78 25 30 38 58 20     : 0x%08X 0x%08X 
    1ae0:	30 78 25 30 38 58 00 00 66 73 5f 66 61 74 3a 20     0x%08X..fs_fat: 
    1af0:	25 75 20 63 6c 75 73 74 65 72 73 2c 20 25 75 20     %u clusters, %u 
    1b00:	66 72 65 65 2c 20 73 74 61 72 74 20 73 65 61 72     free, start sear
    1b10:	63 68 20 61 74 20 25 75 00 00 00 00 66 73 5f 66     ch at %u....fs_f
    1b20:	61 74 3a 20 46 69 6c 65 73 79 73 74 65 6d 20 6e     at: Filesystem n
    1b30:	6f 74 20 63 6c 65 61 6e 6c 79 20 75 6e 6d 6f 75     ot cleanly unmou
    1b40:	6e 74 65 64 20 61 66 74 65 72 20 6c 61 73 74 20     nted after last 
    1b50:	75 73 65 21 00 66 73 5f 66 61 74 3a 20 25 73 20     use!.fs_fat: %s 
    1b60:	75 6e 69 6d 70 6c 65 6d 65 6e 74 65 64 00           unimplemented.
